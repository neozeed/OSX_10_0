# $Id: make.wnt,v 1.1.1.1 2001/01/31 03:58:52 zarzycki Exp $
# Makefile for MDN library, manually configured for WIN-NT (VC5.0)
#
# Copyright (c) 2000 Japan Network Information Center.  All rights reserved.
#  
# By using this file, you agree to the terms and conditions set forth bellow.
# 
# 			LICENSE TERMS AND CONDITIONS 
# 
# The following License Terms and Conditions apply, unless a different
# license is obtained from Japan Network Information Center ("JPNIC"),
# a Japanese association, Fuundo Bldg., 1-2 Kanda Ogawamachi, Chiyoda-ku,
# Tokyo, Japan.
# 
# 1. Use, Modification and Redistribution (including distribution of any
#    modified or derived work) in source and/or binary forms is permitted
#    under this License Terms and Conditions.
# 
# 2. Redistribution of source code must retain the copyright notices as they
#    appear in each source code file, this License Terms and Conditions.
# 
# 3. Redistribution in binary form must reproduce the Copyright Notice,
#    this License Terms and Conditions, in the documentation and/or other
#    materials provided with the distribution.  For the purposes of binary
#    distribution the "Copyright Notice" refers to the following language:
#    "Copyright (c) Japan Network Information Center.  All rights reserved."
# 
# 4. Neither the name of JPNIC may be used to endorse or promote products
#    derived from this Software without specific prior written approval of
#    JPNIC.
# 
# 5. Disclaimer/Limitation of Liability: THIS SOFTWARE IS PROVIDED BY JPNIC
#    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
#    PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL JPNIC BE LIABLE
#    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#    BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#    WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#    OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#    ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
# 
# 6. Indemnification by Licensee
#    Any person or entities using and/or redistributing this Software under
#    this License Terms and Conditions shall defend indemnify and hold
#    harmless JPNIC from and against any and all judgements damages,
#    expenses, settlement liabilities, cost and other liabilities of any
#    kind as a result of use and redistribution of this Software or any
#    claim, suite, action, litigation or proceeding by any third party
#    arising out of or relates to this License Terms and Conditions.
# 
# 7. Governing Law, Jurisdiction and Venue
#    This License Terms and Conditions shall be governed by and and
#    construed in accordance with the law of Japan. Any person or entities
#    using and/or redistributing this Software under this License Terms and
#    Conditions hereby agrees and consent to the personal and exclusive
#    jurisdiction and venue of Tokyo District Court of Japan.

!include <ntwin32.mak>

INCDIR = ..\include
ICONVDIR = ..\win
LIBS =
SYSLIBS = $(conlibsdll)

#
# Files to build MDN library
#

HDRS =  $(ICONVDIR)\iconv.h \
	$(INCDIR)\config.h \
	$(INCDIR)\mdn\assert.h $(INCDIR)\mdn\converter.h \
	$(INCDIR)\mdn\debug.h $(INCDIR)\mdn\localencoding.h \
	$(INCDIR)\mdn\log.h $(INCDIR)\mdn\logmacro.h \
	$(INCDIR)\mdn\msgheader.h $(INCDIR)\mdn\msgtrans.h \
	$(INCDIR)\mdn\normalizer.h $(INCDIR)\mdn\result.h \
	$(INCDIR)\mdn\selectiveencode.h $(INCDIR)\mdn\strhash.h \
	$(INCDIR)\mdn\translator.h $(INCDIR)\mdn\unicode.h \
	$(INCDIR)\mdn\unormalize.h $(INCDIR)\mdn\utf5.h \
	$(INCDIR)\mdn\utf8.h $(INCDIR)\mdn\util.h $(INCDIR)\mdn\zldrule.h

SRCS =  brace.c converter.c debug.c dn.c lace.c localencoding.c log.c \
	msgheader.c msgtrans.c normalizer.c race.c \
	res.c resconf.c result.c \
	selectiveencode.c strhash.c translator.c \
	unicode.c unicodedata.c unormalize.c \
	utf5.c utf8.c util.c zldrule.c

OBJS =  brace.obj converter.obj debug.obj dn.obj lace.obj localencoding.obj log.obj \
	msgheader.obj msgtrans.obj normalizer.obj race.obj \
	res.obj resconf.obj result.obj \
	selectiveencode.obj strhash.obj translator.obj \
	unicode.obj unormalize.obj \
	utf5.obj utf8.obj util.obj zldrule.obj

LIB = libmdn.lib

#
# Target to build
#

all: $(LIB)

libmdn.lib: $(OBJS)
        -del libmdn.lib
	lib /out:libmdn.lib $(OBJS)

#
# Dependencies
#

brace.obj : brace.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) -DDEBUG $*.c

converter.obj : converter.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) -DDEBUG $*.c

debug.obj : debug.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) -DDEBUG $*.c

dn.obj : dn.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) -DDEBUG $*.c

lace.obj : lace.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) -DDEBUG $*.c

localencoding.obj : localencoding.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) -DDEBUG $*.c

log.obj : log.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) -DDEBUG $*.c

msgheader.obj : msgheader.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) -DDEBUG $*.c

msgtrans.obj : msgtrans.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) -DDEBUG $*.c

normalizer.obj : normalizer.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) -DDEBUG $*.c

race.obj : race.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) -DDEBUG $*.c

res.obj : res.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) -DDEBUG $*.c

resconf.obj : resconf.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) -DDEBUG $*.c

result.obj : result.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) -DDEBUG $*.c

selectiveencode.obj : selectiveencode.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) -DDEBUG $*.c

strhash.obj : strhash.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) -DDEBUG $*.c

translator.obj : translator.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) -DDEBUG $*.c

unicode.obj : unicode.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) -DDEBUG $*.c

unormalize.obj : unormalize.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) -DDEBUG $*.c

utf5.obj  : utf5.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) -DDEBUG $*.c

utf8.obj  : utf8.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) -DDEBUG $*.c

util.obj  : util.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) -DDEBUG $*.c

zldrule.obj : zldrule.c $(HDRS)
	$(cc) $(cflags) $(cvarsdll) -I$(INCDIR) -I$(ICONVDIR) -DDEBUG $*.c

#
# mics.
#
generate:
	generate_normalize_data.pl > unicodedata.c

install:

clean:
	del *.obj *.lib core *.core *~

