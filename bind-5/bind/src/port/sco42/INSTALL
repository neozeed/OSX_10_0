IMPORTANT NOTICE: You are going to to everything described here
		  on your own risk. There is absolutely no warranty
		  of any kind.

		  The procedure described below seems to work on
		  my copy of SCO Unix 3.2v4.2; it is not tested on
		  ODT 3.0. It may or may not work on your system.

The build and install procedure on SCO 3.2v4.2 (and hopefully
also on ODT 3.0) is a bit weird. I suggest the following steps:

1) From BIND's "src" directory, "cd port/sco42", e.g. to this
   directory.
2) Save all files listed in "files-to-save". Of course, this list
   is not guaranteed to be complete.
	"tar cvf /some/where/saved-files.tar `cat tools/files-to-backup`"
   is an example of how this can be done. Please feel free to use your
   favorite archiving program.
   Note that *not*all* files listed in "files-to-save" must necessarily
   exist on your system.
3) Make sure that /usr/lib/libsocket.a is original (unmodified) SCO
   socket library, or that the original socket library exists as
   /usr/lib/libsocket.a.orig.
4) Do "ls -l /usr/include/sys/bitypes.h /usr/include/sys/cdefs.h" and
   note if these files exist on your system. These do not exist on
   vanilla SCO 3.2v4.2/ODT 3.0, but there is a chance that these 
   were installed with some third-party package.
5) Still in port/sco42, type "sh tools/percentp.sh". The purpose of
   this shell script is to change "%p" conversions (which SCO cc does
   not understand on 3.2v4.2/ODT 3.0) in printf() format strings
   to "0x%08x". Because of BIND's source tree will be modified by
   percentp.sh, please do not use these modified sources to build
   BIND on systems other than SCO 3.2v4.2/ODT 3.0.
6) cd ../.. (e.g. BIND's "src" directory) and do "make". This should
   compile and build everything.
7) Now decide if you wish to install everything or only binaries.
   If you decide to install binaries only, you must do so by hand,
   and after that, you are done.
   If you decide to install everything, then
	"su"
	"make install"
   Note that some post-installation steps (described below) are required.
8) "cd port/sco42"
   "sh libsocket.sh" updates /usr/lib/libsocket.a with modules from
   BIND's libbind.a and libport.a, using /usr/lib/libsocket.a.orig as
   input.
9) If "/usr/include/sys/bitypes.h" and "/usr/include/sys/cdefs.h" did
   not exist on your system before you started playing with BIND (see
   4) above), "sh tools/fixincludes.sh" will install these two include
   files under indifferent names "/usr/include/sys/BINDbitypes.h" and
   "/usr/include/sys/BINDcdefs.h" and modify BIND's include files to
   reference these new copies. "/usr/include/sys/bitypes.h" and
   "/usr/include/sys/cdefs.h" will then be removed. This is done because
   of the presence of bitypes.h and cdefs.h may have ill effects
   on some software packages, like GNU autoconf, perl etc.

   You may wish to run "sh tools/fixincludes.h" even if bitypes.h and
   cdefs.h existed on your system, but in this case, you must understand
   exactly what you are doing.

10) If you wish to relink any software which uses libsocket.so, you need
   to recompile it first, e.g. something like
	"make clean"
	"make"

Good luck and
God Bless Your Unix,

Eduard Vopicka
