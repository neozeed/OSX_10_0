#define yyFlexLexer zendFlexLexer

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvs/Darwin/Services/apache_mod_php/php/Zend/zend_language_scanner_cc.cc,v 1.1.1.1 2001/01/25 05:01:01 wsanchez Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#if HAVE_UNISTD_H
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yytext_ptr -= yy_more_len; \
	yyleng = (int) (yy_cp - yytext_ptr); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 139
#define YY_END_OF_BUFFER 140
static yyconst short int yy_accept[1327] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  140,   96,
       96,  138,  105,   84,  115,  106,   84,   84,   84,  118,
       84,   84,   84,   84,   84,   84,   84,   90,   90,   84,
       84,   84,   84,   84,   84,  103,  117,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,   85,   84,   87,  120,
      135,  125,  120,   92,   92,  125,  138,  104,  122,  125,
      121,  137,  138,  123,  138,  136,  134,  120,  138,  104,
       33,   32,   89,   88,  108,  110,   96,    0,   96,   99,

       97,   96,  105,   63,    0,  113,    0,  106,    0,  102,
       71,  112,   78,   74,    0,  114,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   68,   58,   66,
       59,   67,   31,   93,   70,  107,  106,   69,   93,   90,
        0,    0,   34,    0,   82,   64,   63,   62,   55,   65,
       83,  111,   76,  103,  103,  103,  103,   20,  103,  103,
      103,  103,  103,  103,  103,   13,  103,  103,  103,  103,
      103,  103,  103,  103,  103,    7,  103,  103,  103,  103,
      103,   79,  103,  103,  103,  103,  103,  103,  103,  103,
      103,   75,   77,  120,  124,   86,   31,   92,    0,  133,

      129,  131,  133,  104,  122,  126,  121,    0,  127,  128,
      123,  130,  134,  120,  119,    0,  104,    0,   32,   88,
      108,  109,   96,    0,   98,    0,    0,   61,  106,    0,
      102,  112,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   93,    0,   93,   91,    0,    0,   72,   60,
       73,  111,    0,  103,  103,   80,  103,  103,  103,  103,
      103,  103,  103,  103,    2,  103,  103,  103,  103,  103,
      103,  103,   14,  103,  103,  103,  103,  103,   35,  103,
      103,  103,  103,  103,  103,  103,   49,   36,  103,   81,
       92,  131,  132,   96,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  103,
      103,  103,  103,   23,  103,  103,  103,  103,  103,  103,
       27,   10,  103,  103,  103,  103,  103,  103,   44,    1,
      103,  103,  103,  103,  103,  103,   56,  103,  103,  103,
      103,  103,  103,  103,  103,  131,  132,   96,    0,    0,
        0,    0,    0,    0,    0,    0,   37,    0,    0,    0,
        0,    0,    0,  116,    0,    0,  103,  103,   57,   25,
      103,   29,    5,  103,  103,  103,  103,   52,  103,  103,
        9,  103,  103,  103,  103,  103,  103,  103,   51,  103,
       28,  103,  103,  103,  103,   54,   11,   96,    0,  100,

        0,    0,    0,    0,   42,    0,    0,    0,    0,    0,
       38,    0,    0,    0,  103,  103,  103,  103,  103,  103,
        8,  103,   15,  103,  103,  103,  103,  103,   50,  103,
      103,  103,    6,   53,   21,   96,    0,    0,    0,    0,
       40,    0,    0,    0,    0,    0,   43,    0,  103,  103,
      103,  103,   18,   24,  103,  103,  103,  103,   30,   16,
      103,   45,  103,   47,   96,    0,    0,    0,    0,    0,
        0,   41,    0,   39,    0,   95,   94,  103,   26,  103,
      103,  103,   12,    4,  103,  103,  103,   96,    0,    0,
        0,    0,  103,  103,   22,  103,  103,  103,   96,    0,

        0,    0,   19,   17,  103,  103,  103,   96,    0,    0,
        0,  103,  103,  103,   96,    0,    0,    0,   46,    3,
       48,   96,    0,    0,    0,   96,    0,    0,    0,   96,
        0,    0,    0,   96,    0,    0,    0,   96,    0,    0,
        0,    0,   96,    0,  101,    0,    0,    0,    0,   96,
        0,  101,    0,    0,    0,    0,   96,    0,    0,    0,
        0,   96,    0,    0,    0,    0,   97,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,

        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,

        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,

        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,

        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,

        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,

        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,

        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,

        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,   25,
       26,   27,   28,   16,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       29,   30,   29,   31,   32,   33,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   16,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59
    } ;

static yyconst int yy_meta[63] =
    {   0,
        1,    2,    3,    3,    4,    1,    4,    5,    4,    4,
        6,    4,    4,    7,    4,    4,    4,    4,    4,    8,
        8,    8,    4,    9,   10,    4,    4,    4,    1,    1,
        4,   11,    1,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,    1,
        4,    1
    } ;

static yyconst short int yy_base[1746] =
    {   0,
     7466, 7465,    0,    0,   62,    0,  114,  115,  121,  122,
      123,  151,  210,    0,  272,    0, 7475, 7474, 7487, 7461,
      121, 7492,  129, 7459,  129, 7456,    0,  110,  132,  130,
      333, 7492, 7457,  124,  121,  143,  152,  319,  324, 7459,
      149,  153,  321, 7454, 7454, 7447, 7492,  302, 7427,  316,
      318,  333,   92, 7432,    0,  344, 7434, 7437,  116, 7423,
     7435,  318,  125, 7438, 7430, 7422, 7492,  312, 7492,    0,
     7492,  396, 7442,  439,  372, 7492,  456,    0, 7435, 7459,
     7436, 7492,  347, 7459,  445, 7492,  457,  458,  450,  469,
     7492,    0, 7492,    0,    0, 7445, 7438,  458, 7437, 7435,

      310, 7424,  477, 7433,  359, 7492,  479, 7430,  471,    0,
     7492,  348, 7492, 7492,  352, 7492, 7454,    0, 7405, 7407,
     7406, 7408, 7405, 7416, 7412, 7396, 7401, 7492, 7492, 7492,
     7492, 7492, 7492,  479, 7492, 7492, 7419, 7492,  483,  494,
      503,  506, 7492, 7394,  459, 7492, 7492, 7419, 7492, 7492,
     7418,  485, 7492,    0,  490, 7406, 7391,    0, 7403, 7388,
     7385, 7404, 7390,  456, 7398,    0, 7394, 7382, 7384, 7395,
     7397,  455, 7379, 7382, 7380,    0, 7391, 7374, 7373, 7368,
     7386,    0, 7380,  456, 7387, 7378, 7367, 7380, 7366, 7374,
     7364, 7492, 7492,    0, 7492, 7492,    0,  516,  526, 7492,

     7492,  510,  532,    0, 7381, 7492, 7383, 7382, 7492, 7492,
     7405, 7492,  544,  545, 7492, 7407,  555,  530,    0,    0,
        0, 7492, 7384,  548, 7492, 7367, 7356, 7492, 7492, 7403,
        0, 7492, 7402, 7353, 7355, 7348, 7353, 7347, 7356, 7364,
     7346, 7344,  560,  563,  566,  569, 7359, 7392, 7492, 7492,
     7492, 7492, 7390, 7350, 7349,    0, 7356, 7355, 7350, 7340,
     7334,  522, 7340, 7350,    0, 7335, 7344, 7328,  557, 7335,
     7326, 7340, 7339, 7340, 7340, 7329, 7335, 7319,    0, 7339,
     7323, 7315, 7314, 7314, 7313, 7327,    0,    0, 7319,    0,
      590,  572,  596, 7338,  611, 7313, 7319, 7326, 7314, 7323,

     7323,  635, 7318, 7310, 7312, 7315, 7301, 7349,  598, 7305,
     7302, 7290, 7303,    0, 7310, 7293, 7291, 7301, 7308, 7287,
        0, 7298, 7281, 7300, 7289, 7297, 7279, 7293,    0,    0,
     7286, 7298, 7278, 7296, 7275, 7275,    0, 7288, 7273, 7283,
     7273, 7281, 7286, 7268, 7282, 7492, 7492, 7294,  613,  640,
     2923, 2913,  638, 2924, 2915,  509, 7492, 2927, 2930,  643,
     2905, 2898, 2908, 7492, 2946,  611, 2910, 2909,    0,    0,
     2893,    0,    0, 2898, 2880, 2885, 2874,    0, 2869, 2853,
        0, 2859, 2858, 2860, 2858, 2851, 2847, 2854,    0, 2830,
        0, 2826, 2829, 2825, 2817,    0,    0, 2828,  641, 7492,

     2799, 2778,  644,  645, 7492, 2788, 2778, 2723, 2707,  647,
     7492, 2719,  651, 2709, 2723, 2722, 2711, 2698, 2713, 2697,
        0, 2704, 2710, 2694, 2701, 2692, 2702, 2694,    0, 2703,
     2693, 2701,    0,    0,    0, 2712,  643, 2680,  675,  657,
     7492, 2680, 2675,  672,  673,  678, 7492, 2672, 2691, 2688,
     2669, 2677,    0,    0, 2674, 2672, 2669, 2665,    0,    0,
     2649, 2651, 2644, 2646, 2649,  672, 2637,  680,  685,  686,
      688, 7492,  690, 7492,  702,    0,    0, 2622,    0, 2609,
     2621, 2605,    0,    0, 2589, 2582, 2584, 2604,  685, 2592,
     2592,  705, 2587, 2582,    0, 2556, 2558, 2551, 2569,  687,

     2547, 2542,    0,    0, 2544, 2529, 2534, 2541,  693, 2525,
     2515, 2516, 2505, 2510, 2520,  702, 2488, 2469,    0,    0,
        0, 2495,  708, 2484, 2477, 2484,  710, 2455, 2463, 2475,
      719, 2445, 2448, 2452,  725, 2447,  738, 2449,  740, 2445,
      753,  770, 2443,  742,  651,  780, 2416, 2414, 2403, 2418,
      750, 7492, 2437, 2397, 2390, 2380, 2403,  760, 2377, 2368,
      793, 2381,  778, 2391, 2384,  796, 7492, 2369,  780, 2367,
      800, 2360,  806, 2358,  808, 2355,  812, 2352,  813, 2338,
      817, 2335,  818, 2333,  826, 2326,  838, 2324,  846, 2323,
      847, 2321,  848, 2312,  852, 2293,  858, 2292,  859, 2290,

      880, 2289,  884, 2287,  888, 2280,  892, 2278,  893, 2275,
      894, 2247,  898, 2246,  905, 2245,  906, 2244,  926, 2243,
      928, 2242,  934, 2241,  938, 2232,  939, 2213,  940, 2210,
      946, 2201,  951, 2200,  960, 2199,  968, 2198,  972, 2196,
      974, 2195,  980, 2167,  985, 2165,  986, 2164,  997, 2162,
     1006, 2155, 1008, 2153, 1014, 2152, 1018, 2150, 1019, 2133,
     1020, 2130, 1026, 2121, 1031, 2119, 1048, 2118, 1052, 2116,
     1054, 2109, 1056, 2107, 1060, 2104, 1065, 2093, 1066, 2087,
     1077, 2084, 1086, 2082, 1088, 2075, 1094, 2073, 1098, 2072,
     1100, 2070, 1106, 2050, 1111, 2045, 1123, 2042, 1128, 2041,

     1132, 2039, 1134, 2038, 1136, 2036, 1140, 2027, 1145, 2024,
     1146, 2013, 1157, 2007, 1168, 2004, 1174, 2002, 1178, 1995,
     1180, 1993, 1182, 1992, 1186, 1990, 1191, 1983, 1203, 1970,
     1208, 1967, 1212, 1965, 1214, 1961, 1216, 1958, 1220, 1956,
     1226, 1947, 1237, 1944, 1248, 1933, 1249, 1924, 1254, 1922,
     1258, 1919, 1260, 1916, 1262, 1915, 1266, 1913, 1271, 1912,
     1283, 1910, 1288, 1890, 1294, 1887, 1296, 1885, 1300, 1881,
     1306, 1878, 1308, 1876, 1317, 1867, 1328, 1864, 1329, 1857,
     1334, 1853, 1338, 1844, 1340, 1842, 1342, 1841, 1346, 1839,
     1363, 1835, 1368, 1832, 1374, 1830, 1375, 1810, 1376, 1807,

     1380, 1805, 1386, 1798, 1388, 1796, 1397, 1793, 1408, 1790,
     1409, 1787, 1414, 1784, 1420, 1773, 1422, 1764, 1426, 1762,
     1434, 1761, 1443, 1759, 1448, 1755, 1454, 1752, 1455, 1750,
     1456, 1731, 1460, 1730, 1466, 1727, 1468, 1725, 1488, 1718,
     1489, 1716, 1494, 1715, 1496, 1713, 1500, 1704, 1501, 1693,
     1502, 1684, 1506, 1682, 1514, 1681, 1534, 1679, 1535, 1672,
     1536, 1670, 1540, 1667, 1542, 1664, 1546, 1650, 1547, 1647,
     1548, 1645, 1568, 1638, 1576, 1636, 1580, 1635, 1581, 1633,
     1582, 1624, 1586, 1605, 1588, 1604, 1593, 1602, 1594, 1601,
     1614, 1599, 1616, 1592, 1622, 1590, 1626, 1587, 1627, 1559,

     1628, 1558, 1634, 1557, 1639, 1556, 1648, 1555, 1656, 1554,
     1660, 1553, 1662, 1544, 1668, 1525, 1673, 1522, 1674, 1513,
     1685, 1512, 1694, 1511, 1696, 1510, 1702, 1508, 1706, 1507,
     1707, 1479, 1708, 1477, 1714, 1476, 1719, 1474, 1736, 1467,
     1740, 1465, 1742, 1464, 1744, 1462, 1748, 1445, 1753, 1442,
     1754, 1433, 1765,  118, 1774,  145, 1776,  157, 1782,  318,
     1786,  361, 1788,  370, 1794,  469, 1799,  494, 1811,  514,
     1816,  524, 1820,  547, 1822,  570, 1824,  572, 1828,  594,
     1833,  596, 1834,  598, 1845,  636, 1856,  637, 1862,  642,
     1866,  664, 1868,  689, 1870,  691, 1874,  695, 1879,  697,

     1891,  698, 1896,  701, 1900,  706, 1902,  718, 1904,  721,
     1908,  723, 1914,  727, 1925,  733, 1936,  736, 1937,  738,
     1942,  741, 1946,  755, 1948,  765, 1950,  768, 1954,  776,
     1959,  779, 1971,  782, 1976,  785, 1982,  786, 1984,  788,
     1988,  789, 1994,  791, 1996,  793, 2005,  799, 2016,  814,
     2017,  819, 2022,  823, 2026,  824, 2028,  825, 2030,  828,
     2034,  834, 2051,  837, 2056,  854, 2062,  856, 2063,  857,
     2064,  860, 2068,  863, 2074,  866, 2076,  867, 2085,  869,
     2096,  870, 2097,  871, 2102,  881, 2108,  899, 2110,  900,
     2114,  902, 2122,  903, 2131,  904, 2136,  913, 2142,  914,

     2143,  916, 2144,  917, 2148,  927, 2154,  936, 2156,  945,
     2176,  947, 2177,  948, 2182,  950, 2184,  957, 2188,  959,
     2189,  962, 2190,  976, 2194,  979, 2202,  982, 2222,  984,
     2223,  991, 2224,  993, 2228,  994, 2230,  996, 2234, 1005,
     2235, 1016, 2236, 1025, 2256, 1027, 2264, 1028, 2268, 1030,
     2269, 1037, 2270, 1039, 2274, 1042, 2276, 1043, 2281, 1062,
     2282, 1064, 2302, 1067, 2304, 1071, 2310, 1073, 2314, 1074,
     2315, 1076, 2316, 1085, 2322, 1096, 2327, 1099, 2336, 1102,
     2344, 1105, 2348, 1108, 2350, 1110, 2356, 1117, 2361, 1119,
     2362, 1122, 2373, 1142, 2382, 1144, 2384, 1147, 2390, 1151,

     2394, 1153, 2395, 1154, 2396, 1156, 2402, 1165, 2407, 1169,
     2424, 1176, 2428, 1179, 2430, 1188, 2432, 1190, 2436, 1193,
     2441, 1197, 2442, 1199, 2453, 1202, 2462, 1222, 2464, 1224,
     2470, 1225, 2474, 1227, 2476, 1228, 2482, 1231, 2487, 1234,
     2499, 1236, 2504, 1245, 2508, 1256, 2510, 1259, 2512, 1268,
     2516, 1270, 2521, 1273, 2522, 1277, 2533, 1279, 2544, 1282,
     2550, 1295, 2554, 1302, 2556, 1304, 2558, 1305, 2562, 1307,
     2567, 1314, 2579, 1316, 2584, 1319, 2588, 1325, 2590, 1336,
     2592, 1339, 2596, 1348, 2602, 1350, 2613, 1351, 2624, 1353,
     2625, 1354, 2630, 1357, 2634, 1362, 2636, 1382, 2638, 1384,

     2642, 1385, 2647, 1387, 2659, 1394, 2664, 1396, 2670, 1399,
     2672, 1405, 2676, 1416, 2682, 1419, 2684, 1421, 2693, 1428,
     2704, 1430, 2705, 7492, 2710, 7492, 2762, 2773, 2784, 2795,
     2806, 2817, 2828, 1445, 2839, 2843, 2853, 2863, 2867, 2878,
     2887, 2891, 2895, 2906, 2917, 2921, 2932, 2942, 2953, 2962,
     2973, 2984, 2995, 3006, 3017, 3028, 3039, 3050, 3061, 3072,
     3083, 3094, 3105, 3116, 3127, 3138, 3149, 3160, 3171, 3182,
     3193, 3204, 3215, 3226, 3237, 3248, 3259, 3270, 3281, 3292,
     3303, 3314, 3325, 3336, 3347, 3358, 3369, 3380, 3391, 3402,
     3413, 3424, 3435, 3446, 3457, 3468, 3479, 3490, 3501, 3512,

     3523, 3534, 3545, 3556, 3567, 3578, 3589, 3600, 3611, 3622,
     3633, 3644, 3655, 3666, 3677, 3688, 3699, 3710, 3721, 3732,
     3743, 3754, 3765, 3776, 3787, 3798, 3809, 3820, 3831, 3842,
     3853, 3864, 3875, 3886, 3897, 3908, 3919, 3930, 3941, 3952,
     3963, 3974, 3985, 3996, 4007, 4018, 4029, 4040, 4051, 4062,
     4073, 4084, 4095, 4106, 4117, 4128, 4139, 4150, 4161, 4172,
     4183, 4194, 4205, 4216, 4227, 4238, 4249, 4260, 4271, 4282,
     4293, 4304, 4315, 4326, 4337, 4348, 4359, 4370, 4381, 4392,
     4403, 4414, 4425, 4436, 4447, 4458, 4469, 4480, 4491, 4502,
     4513, 4524, 4535, 4546, 4557, 4568, 4579, 4590, 4601, 4612,

     4623, 4634, 4645, 4656, 4667, 4678, 4689, 4700, 4711, 4722,
     4733, 4744, 4755, 4766, 4777, 4788, 4799, 4810, 4821, 4832,
     4843, 4854, 4865, 4876, 4887, 4898, 4909, 4920, 4931, 4942,
     4953, 4964, 4975, 4986, 4997, 5008, 5019, 5030, 5041, 5052,
     5063, 5074, 5085, 5096, 5107, 5118, 5129, 5140, 5151, 5162,
     5173, 5184, 5195, 5206, 5217, 5228, 5239, 5250, 5261, 5272,
     5283, 5294, 5305, 5316, 5327, 5338, 5349, 5360, 5371, 5382,
     5393, 5404, 5415, 5426, 5437, 5448, 5459, 5470, 5481, 5492,
     5503, 5514, 5525, 5536, 5547, 5558, 5569, 5580, 5591, 5602,
     5613, 5624, 5635, 5646, 5657, 5668, 5679, 5690, 5701, 5712,

     5723, 5734, 5745, 5756, 5767, 5778, 5789, 5800, 5811, 5822,
     5833, 5844, 5855, 5866, 5877, 5888, 5899, 5910, 5921, 5932,
     5943, 5954, 5965, 5976, 5987, 5998, 6009, 6020, 6031, 6042,
     6053, 6064, 6075, 6086, 6097, 6108, 6119, 6130, 6141, 6152,
     6163, 6174, 6185, 6196, 6207, 6218, 6229, 6240, 6251, 6262,
     6273, 6284, 6295, 6306, 6317, 6328, 6339, 6350, 6361, 6372,
     6383, 6394, 6405, 6416, 6427, 6438, 6449, 6460, 6471, 6482,
     6493, 6504, 6515, 6526, 6537, 6548, 6559, 6570, 6581, 6592,
     6603, 6614, 6625, 6636, 6647, 6658, 6669, 6680, 6691, 6702,
     6713, 6724, 6735, 6746, 6757, 6768, 6779, 6790, 6801, 6812,

     6823, 6834, 6845, 6856, 6867, 6878, 6889, 6900, 6911, 6922,
     6933, 6944, 6955, 6966, 6977, 6988, 6999, 7010, 7021, 7032,
     7043, 7054, 7065, 7076, 7087, 7098, 7109, 7120, 7131, 7142,
     7153, 7164, 7175, 7186, 7197, 7208, 7219, 7230, 7241, 7252,
     7263, 7274, 7285, 7296, 7307
    } ;

static yyconst short int yy_def[1746] =
    {   0,
     1327, 1327, 1326,    3, 1326,    5, 1328, 1328,    5,    5,
        5,    5, 1326,   13, 1326,   15, 1329, 1329, 1326, 1330,
     1331, 1326, 1326, 1326, 1332, 1333, 1334, 1326, 1326, 1335,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1336, 1326, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1326, 1326, 1326, 1337,
     1326, 1326, 1337, 1326, 1326, 1326, 1338, 1339, 1326, 1326,
     1340, 1326, 1340, 1326, 1338, 1326, 1326, 1337, 1338, 1341,
     1326, 1342, 1326, 1343, 1344, 1326, 1345, 1330, 1330, 1326,

     1326, 1326, 1326, 1326, 1332, 1326, 1332, 1333, 1333, 1346,
     1326, 1326, 1326, 1326, 1335, 1326, 1335,   31, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1333, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1326, 1326, 1337, 1326, 1326, 1337, 1326, 1326, 1326,

     1326, 1326, 1326, 1339, 1326, 1326, 1340, 1340, 1326, 1326,
     1326, 1326, 1326, 1337, 1326, 1326, 1341, 1326, 1342, 1343,
     1344, 1326, 1347, 1345, 1326, 1326, 1326, 1326, 1326, 1326,
     1346, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1348, 1326, 1326,
     1326, 1326, 1326, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1326, 1326, 1326, 1349, 1347, 1326, 1326, 1326, 1326, 1326,

     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1348, 1350, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1326, 1326, 1351, 1349, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1350, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1352, 1351, 1326,

     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1353, 1352, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1354, 1353, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1355, 1354, 1326,
     1326, 1326, 1336, 1336, 1336, 1336, 1336, 1336, 1356, 1355,

     1326, 1326, 1336, 1336, 1336, 1336, 1336, 1357, 1356, 1326,
     1326, 1336, 1336, 1336, 1358, 1357, 1326, 1326, 1336, 1336,
     1336, 1359, 1358, 1326, 1326, 1360, 1359, 1326, 1326, 1361,
     1360, 1326, 1326, 1362, 1361, 1326, 1326, 1363, 1362, 1326,
     1326, 1326, 1364, 1363, 1326, 1326, 1326, 1326, 1326, 1365,
     1364, 1326, 1326, 1326, 1326, 1326, 1366, 1365, 1326, 1326,
     1326, 1367, 1366, 1326, 1326, 1326, 1326, 1368, 1367, 1369,
     1368, 1370, 1369, 1371, 1370, 1372, 1371, 1373, 1372, 1374,
     1373, 1375, 1374, 1376, 1375, 1377, 1376, 1378, 1377, 1379,
     1378, 1380, 1379, 1381, 1380, 1382, 1381, 1383, 1382, 1384,

     1383, 1385, 1384, 1386, 1385, 1387, 1386, 1388, 1387, 1389,
     1388, 1390, 1389, 1391, 1390, 1392, 1391, 1393, 1392, 1394,
     1393, 1395, 1394, 1396, 1395, 1397, 1396, 1398, 1397, 1399,
     1398, 1400, 1399, 1401, 1400, 1402, 1401, 1403, 1402, 1404,
     1403, 1405, 1404, 1406, 1405, 1407, 1406, 1408, 1407, 1409,
     1408, 1410, 1409, 1411, 1410, 1412, 1411, 1413, 1412, 1414,
     1413, 1415, 1414, 1416, 1415, 1417, 1416, 1418, 1417, 1419,
     1418, 1420, 1419, 1421, 1420, 1422, 1421, 1423, 1422, 1424,
     1423, 1425, 1424, 1426, 1425, 1427, 1426, 1428, 1427, 1429,
     1428, 1430, 1429, 1431, 1430, 1432, 1431, 1433, 1432, 1434,

     1433, 1435, 1434, 1436, 1435, 1437, 1436, 1438, 1437, 1439,
     1438, 1440, 1439, 1441, 1440, 1442, 1441, 1443, 1442, 1444,
     1443, 1445, 1444, 1446, 1445, 1447, 1446, 1448, 1447, 1449,
     1448, 1450, 1449, 1451, 1450, 1452, 1451, 1453, 1452, 1454,
     1453, 1455, 1454, 1456, 1455, 1457, 1456, 1458, 1457, 1459,
     1458, 1460, 1459, 1461, 1460, 1462, 1461, 1463, 1462, 1464,
     1463, 1465, 1464, 1466, 1465, 1467, 1466, 1468, 1467, 1469,
     1468, 1470, 1469, 1471, 1470, 1472, 1471, 1473, 1472, 1474,
     1473, 1475, 1474, 1476, 1475, 1477, 1476, 1478, 1477, 1479,
     1478, 1480, 1479, 1481, 1480, 1482, 1481, 1483, 1482, 1484,

     1483, 1485, 1484, 1486, 1485, 1487, 1486, 1488, 1487, 1489,
     1488, 1490, 1489, 1491, 1490, 1492, 1491, 1493, 1492, 1494,
     1493, 1495, 1494, 1496, 1495, 1497, 1496, 1498, 1497, 1499,
     1498, 1500, 1499, 1501, 1500, 1502, 1501, 1503, 1502, 1504,
     1503, 1505, 1504, 1506, 1505, 1507, 1506, 1508, 1507, 1509,
     1508, 1510, 1509, 1511, 1510, 1512, 1511, 1513, 1512, 1514,
     1513, 1515, 1514, 1516, 1515, 1517, 1516, 1518, 1517, 1519,
     1518, 1520, 1519, 1521, 1520, 1522, 1521, 1523, 1522, 1524,
     1523, 1525, 1524, 1526, 1525, 1527, 1526, 1528, 1527, 1529,
     1528, 1530, 1529, 1531, 1530, 1532, 1531, 1533, 1532, 1534,

     1533, 1535, 1534, 1536, 1535, 1537, 1536, 1538, 1537, 1539,
     1538, 1540, 1539, 1541, 1540, 1542, 1541, 1543, 1542, 1544,
     1543, 1545, 1544, 1546, 1545, 1547, 1546, 1548, 1547, 1549,
     1548, 1550, 1549, 1551, 1550, 1552, 1551, 1553, 1552, 1554,
     1553, 1555, 1554, 1556, 1555, 1557, 1556, 1558, 1557, 1559,
     1558, 1560, 1559, 1561, 1560, 1562, 1561, 1563, 1562, 1564,
     1563, 1565, 1564, 1566, 1565, 1567, 1566, 1568, 1567, 1569,
     1568, 1570, 1569, 1571, 1570, 1572, 1571, 1573, 1572, 1574,
     1573, 1575, 1574, 1576, 1575, 1577, 1576, 1578, 1577, 1579,
     1578, 1580, 1579, 1581, 1580, 1582, 1581, 1583, 1582, 1584,

     1583, 1585, 1584, 1586, 1585, 1587, 1586, 1588, 1587, 1589,
     1588, 1590, 1589, 1591, 1590, 1592, 1591, 1593, 1592, 1594,
     1593, 1595, 1594, 1596, 1595, 1597, 1596, 1598, 1597, 1599,
     1598, 1600, 1599, 1601, 1600, 1602, 1601, 1603, 1602, 1604,
     1603, 1605, 1604, 1606, 1605, 1607, 1606, 1608, 1607, 1609,
     1608, 1610, 1609, 1611, 1610, 1612, 1611, 1613, 1612, 1614,
     1613, 1615, 1614, 1616, 1615, 1617, 1616, 1618, 1617, 1619,
     1618, 1620, 1619, 1621, 1620, 1622, 1621, 1623, 1622, 1624,
     1623, 1625, 1624, 1626, 1625, 1627, 1626, 1628, 1627, 1629,
     1628, 1630, 1629, 1631, 1630, 1632, 1631, 1633, 1632, 1634,

     1633, 1635, 1634, 1636, 1635, 1637, 1636, 1638, 1637, 1639,
     1638, 1640, 1639, 1641, 1640, 1642, 1641, 1643, 1642, 1644,
     1643, 1645, 1644, 1646, 1645, 1647, 1646, 1648, 1647, 1649,
     1648, 1650, 1649, 1651, 1650, 1652, 1651, 1653, 1652, 1654,
     1653, 1655, 1654, 1656, 1655, 1657, 1656, 1658, 1657, 1659,
     1658, 1660, 1659, 1661, 1660, 1662, 1661, 1663, 1662, 1664,
     1663, 1665, 1664, 1666, 1665, 1667, 1666, 1668, 1667, 1669,
     1668, 1670, 1669, 1671, 1670, 1672, 1671, 1673, 1672, 1674,
     1673, 1675, 1674, 1676, 1675, 1677, 1676, 1678, 1677, 1679,
     1678, 1680, 1679, 1681, 1680, 1682, 1681, 1683, 1682, 1684,

     1683, 1685, 1684, 1686, 1685, 1687, 1686, 1688, 1687, 1689,
     1688, 1690, 1689, 1691, 1690, 1692, 1691, 1693, 1692, 1694,
     1693, 1695, 1694, 1696, 1695, 1697, 1696, 1698, 1697, 1699,
     1698, 1700, 1699, 1701, 1700, 1702, 1701, 1703, 1702, 1704,
     1703, 1705, 1704, 1706, 1705, 1707, 1706, 1708, 1707, 1709,
     1708, 1710, 1709, 1711, 1710, 1712, 1711, 1713, 1712, 1714,
     1713, 1715, 1714, 1716, 1715, 1717, 1716, 1718, 1717, 1719,
     1718, 1720, 1719, 1721, 1720, 1722, 1721, 1723, 1722, 1724,
     1723, 1725, 1724, 1726, 1725, 1727, 1726, 1728, 1727, 1729,
     1728, 1730, 1729, 1731, 1730, 1732, 1731, 1733, 1732, 1734,

     1733, 1735, 1734, 1736, 1735, 1737, 1736, 1738, 1737, 1739,
     1738, 1740, 1739, 1741, 1740, 1742, 1741, 1743, 1742, 1744,
     1743, 1745, 1744, 1326, 1745,    0, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,

     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,

     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,

     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,

     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326
    } ;

static yyconst short int yy_nxt[7555] =
    {   0,
       22,   23,   23,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   32,   35,   36,   37,   38,
       39,   39,   40,   32,   41,   42,   43,   44,   32,   22,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   55,   55,   57,   55,   58,   59,   60,   55,
       61,   62,   55,   63,   64,   65,   66,   55,   55,   67,
       68,   69,   22,   70,   70,   70,   70,   71,   70,   72,
       70,   70,   70,   70,   70,   70,   70,   70,   73,   70,
       70,   74,   75,   75,   70,   70,   70,   70,   70,   70,
       76,   77,   70,   78,   79,   78,   78,   78,   78,   78,

       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   80,   70,   76,   82,   82,   84,   84,   87,  100,
      103,  103,  103,   88,  106,  111,  112,  131,  129,  173,
      116,  113,  957,   83,   83,  174,  132,  133,  101,  130,
       85,   85,   89,   86,   86,   87,   87,  114,  107,  117,
      181,   88,  134,  134,  134,  136,  182,  144,  135,  959,
      137,  187,  102,  145,  146,  147,  188,  138,  148,  149,
       89,  961,   90,   87,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,

       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   92,   91,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   91,
       91,   91,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,

       93,   93,   93,   94,   93,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   93,   93,   93,  118,  225,  139,  192,  140,  140,
      140,  139,  963,  140,  140,  140,  150,  151,  156,  160,
      232,  233,  157,  158,  161,  164,  141,  209,  226,  165,
      162,  141,  116,  163,  106,  166,  119,  120,  167,  121,
      185,  122,  193,  186,  123,  142,  210,  168,  169,  170,
      124,  117,  176,  125,  126,  965,  127,  171,  107,  172,
      177,  198,  198,  198,  967,  178,  195,  195,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  110,  195,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  196,  195,  195,  198,  198,
      198,  201,  213,  213,  202,  202, 1326,  213,  214,  202,
      202,  215,  216,  229,  230,  202,  202,  212,  103,  103,
      103, 1326, 1326,  248,  249, 1326,  105,  252,  253,  213,
      213,  263,  218,  969,  264,  199,  271, 1326,  134,  134,

      134,  203,  243,  243,  243,  282,  203,  272,  283, 1326,
      356,  139,  203,  140,  140,  140,  141,  244,  971,  244,
      141,  357,  245,  245,  245,  246,  246,  246,  254,  292,
      292,  141,  215,  216,  255,  198,  198,  198,  973,  246,
      246,  246,  246,  246,  246,  291,  291,  291,  975,  213,
      213,  293,  293,  293,  213,  214, 1326,  215,  216,  291,
      291,  291,  291,  291,  291,  293,  293,  293,  293,  293,
      293,  977, 1326,  317,  318, 1326,  213,  213,  218,  243,
      243,  243,  245,  245,  245,  245,  245,  245,  246,  246,
      246,  346,  346,  324,  979,  325,  981,  141,  326, 1326,

      364,  365,  246,  246,  246,  246,  246,  246,  327,  291,
      291,  291,  328,  364,  365,  347,  347,  347,  983, 1326,
      985, 1326,  987,  291,  291,  291,  291,  291,  291,  347,
      347,  347,  347,  347,  347, 1326,  356, 1326, 1326,  404,
     1326,  400,  400,  400,  410,  440,  404,  357,  410, 1326,
      405, 1326,  446,  552,  553,  411,  441,  405,  440,  411,
      989,  991, 1326,  447, 1326, 1326,  993, 1326, 1326,  441,
     1326,  401,  358,  471,  473,  406,  468,  468,  468,  446,
     1326,  468,  468,  468,  472,  474,  404,  356,  995,  471,
      447,  473, 1326, 1326, 1326, 1326, 1326,  405,  357, 1326,

      472, 1326,  474,  492,  492,  492,  492,  492,  492, 1326,
     1326, 1326, 1326,  997, 1326,  999, 1326, 1326, 1326, 1001,
     1326, 1003, 1005, 1326,  491, 1007, 1326, 1326,  152, 1326,
     1009,  152, 1326, 1326, 1326, 1326, 1326, 1326, 1326,  541,
      541,  541, 1011, 1326, 1326, 1013, 1326, 1015, 1326, 1326,
     1326, 1017, 1326, 1326,  541,  541,  541, 1019, 1326, 1326,
     1021, 1326, 1023,  542, 1326, 1025, 1326, 1326, 1326, 1326,
     1326,  546,  546,  546, 1326,  547, 1326, 1326,  542, 1027,
      548,  546,  546,  546, 1326,  547, 1326, 1326, 1326, 1029,
      548, 1326, 1031, 1326,  566,  566,  566,  566,  566,  566,

     1033, 1326, 1326, 1035, 1326, 1326, 1037, 1326, 1326, 1039,
     1041, 1326, 1043, 1045, 1326, 1047, 1326, 1049,  549,  567,
     1326, 1326,  567, 1051, 1326, 1326, 1326, 1326,  549, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1053, 1326,
     1326, 1326, 1326, 1055, 1326, 1326, 1326, 1057, 1059, 1061,
     1326, 1326, 1063, 1326, 1326, 1326, 1326, 1326, 1065, 1326,
     1326, 1067, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1069, 1326,
     1071, 1073, 1326, 1326, 1075, 1326, 1326, 1077, 1326, 1326,
     1079, 1081, 1326, 1083, 1085, 1087, 1326, 1326, 1326, 1326,

     1326, 1326, 1326, 1326, 1326, 1089, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1091, 1093, 1326, 1095, 1097, 1099, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1101, 1103, 1326,
     1105, 1107, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1109, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1111, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1113,
     1326, 1115, 1117, 1326, 1119, 1326, 1326, 1326, 1326, 1326,
     1326, 1121, 1326, 1123, 1326, 1326, 1125, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,

     1127, 1326, 1326, 1129, 1326, 1326, 1131, 1326, 1133, 1326,
     1326, 1326, 1326, 1326, 1326, 1135, 1326, 1137, 1139, 1326,
     1141, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1143,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1145, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1147,
     1326, 1149, 1151, 1326, 1153, 1326, 1326, 1326, 1326, 1326,
     1326, 1155, 1326, 1157, 1326, 1326, 1159, 1161, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1163, 1326, 1165, 1326,
     1326, 1167, 1326, 1326, 1326, 1169, 1326, 1171, 1173, 1326,

     1175, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1177,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1179, 1326, 1326, 1181, 1326, 1326, 1183, 1326, 1326, 1185,
     1326, 1326, 1187, 1326, 1189, 1326, 1326, 1326, 1326, 1326,
     1326, 1191, 1326, 1193, 1326, 1326, 1195, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1197, 1326, 1199, 1326,
     1326, 1201, 1326, 1326, 1326, 1203, 1326, 1205, 1207, 1326,
     1209, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1211,
     1326, 1326, 1326, 1213, 1326, 1326, 1326, 1326, 1326, 1326,

     1215, 1326, 1326, 1217, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1219, 1326, 1221, 1326, 1326, 1223, 1326, 1326,
     1326, 1225, 1326, 1227, 1326, 1326, 1229, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1231, 1326, 1233, 1235,
     1326, 1237, 1239, 1326, 1326, 1241, 1326, 1326, 1243, 1326,
     1245, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1247,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1249, 1326, 1326, 1251, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1253, 1326, 1255, 1326, 1326, 1257, 1326, 1326,

     1326, 1259, 1326, 1261, 1326, 1326, 1263, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1265,
     1326, 1326, 1326, 1326, 1326, 1326, 1267, 1326, 1269, 1271,
     1326, 1273, 1326, 1326, 1326, 1326, 1326, 1326, 1275, 1326,
     1277, 1326, 1326, 1279, 1326, 1326, 1326, 1326, 1326, 1281,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1283, 1326, 1326, 1285, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1287, 1326, 1289, 1291, 1326, 1293, 1295, 1326,
     1326, 1297, 1326, 1326, 1326, 1326, 1299, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,

     1326, 1326, 1326, 1326, 1326, 1326, 1301, 1326, 1303, 1305,
     1326, 1307, 1326, 1326, 1326, 1326, 1326, 1326, 1309, 1326,
     1311, 1326, 1326, 1313, 1326, 1326, 1326, 1326, 1326, 1315,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1317, 1326, 1326, 1319, 1326, 1321, 1326, 1326, 1326, 1326,
     1326, 1326, 1323, 1326, 1325,  110, 1326,  955, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326,  953, 1326, 1326,  951,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326,  949, 1326,  947,  945,
     1326,  943, 1326, 1326, 1326, 1326, 1326, 1326,  941, 1326,

      939,  937, 1326,  935, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326,  933,  931, 1326,  929,  927,  925,  923, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326,  921, 1326, 1326,  919,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,  917, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326,  915,  913,  911,
      909,  907,  905,  903, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,

     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326,  901, 1326, 1326,  899, 1326,  897, 1326, 1326, 1326,
     1326, 1326, 1326,  895, 1326,  893,  891, 1326,  889,  887,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,  885, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326,  883, 1326,  881,
      879, 1326,  877, 1326, 1326, 1326, 1326, 1326, 1326,  875,
     1326,  873, 1326, 1326,  871, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,  869, 1326,
     1326,  867, 1326, 1326,  865, 1326,  863, 1326, 1326, 1326,

     1326, 1326, 1326,  861, 1326,  859,  857, 1326,  855, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326,  853, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,  851, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326,  849, 1326,  847,
      845, 1326,  843, 1326, 1326, 1326, 1326, 1326, 1326,  841,
     1326,  839, 1326, 1326,  837,  835, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326,  833, 1326,  831, 1326, 1326,  829,
     1326, 1326, 1326,  827, 1326,  825,  823, 1326,  821, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326,  819, 1326, 1326,

     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,  817, 1326,
     1326,  815, 1326, 1326,  813, 1326, 1326,  811, 1326, 1326,
      809, 1326,  807, 1326, 1326, 1326, 1326, 1326, 1326,  805,
     1326,  803, 1326, 1326,  801, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326,  799, 1326,  797, 1326, 1326,  795,
     1326, 1326, 1326,  793, 1326,  791,  789, 1326,  787, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326,  785, 1326, 1326,
     1326,  783, 1326, 1326, 1326, 1326, 1326, 1326,  781, 1326,
     1326,  779, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,

      777, 1326,  775, 1326, 1326,  773, 1326, 1326, 1326,  771,
     1326,  769, 1326, 1326,  767, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326,  765, 1326,  763,  761, 1326,  759,
      757, 1326, 1326,  755, 1326, 1326,  753, 1326,  751, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326,  749, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,  747, 1326,
     1326,  745, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
      743, 1326,  741, 1326, 1326,  739, 1326, 1326, 1326,  737,
     1326,  735, 1326, 1326,  733, 1326, 1326, 1326, 1326, 1326,

     1326, 1326, 1326, 1326, 1326, 1326, 1326,  731, 1326, 1326,
     1326, 1326, 1326, 1326,  729, 1326,  727,  725, 1326,  723,
     1326, 1326, 1326, 1326, 1326, 1326,  721, 1326,  719, 1326,
     1326,  717, 1326, 1326, 1326, 1326, 1326,  715, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,  713, 1326,
     1326,  711, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
      709, 1326,  707,  705, 1326,  703,  701, 1326, 1326,  699,
     1326, 1326, 1326, 1326,  697, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326,  695, 1326,  693,  691, 1326,  689,

     1326, 1326, 1326, 1326, 1326, 1326,  687, 1326,  685, 1326,
     1326,  683, 1326, 1326, 1326, 1326, 1326,  681, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,  679, 1326,
     1326,  677, 1326,  675, 1326, 1326, 1326, 1326, 1326, 1326,
      673, 1326,  671,  669, 1326,  667, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326,  665, 1326, 1326,  663, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326,  661, 1326,  659,  657, 1326,  655,
     1326, 1326, 1326, 1326, 1326, 1326,  653, 1326,  651,  649,
     1326,  647, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,

     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,  645,
      643, 1326,  641,  639,  637,  635, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326,  633, 1326, 1326,  631, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326,  629, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326,  627,  625,  623,  621,  619,
      617,  615, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,  613,

     1326, 1326,  611, 1326,  609, 1326, 1326, 1326, 1326, 1326,
     1326,  607, 1326,  605,  603, 1326,  601,  599, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326,  597, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326,  595, 1326,  593,  591, 1326,
      589, 1326, 1326, 1326, 1326, 1326, 1326,  587, 1326,  585,
     1326, 1326,  583, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326,  581, 1326, 1326,  579,
     1326, 1326,  577, 1326,  575, 1326, 1326, 1326, 1326, 1326,
     1326,  573, 1326,  571,  561, 1326,  561, 1326, 1326, 1326,

     1326, 1326, 1326, 1326, 1326,  569, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326,  565, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326,  564, 1326,  563,  561, 1326,
      560, 1326, 1326, 1326, 1326, 1326, 1326,  559, 1326,  552,
     1326, 1326,  558,  556, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326,  555, 1326,  554, 1326, 1326,  551, 1326, 1326,
     1326,  545, 1326,  544,  540, 1326,  539, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326,  537, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326,  536, 1326, 1326,  535,

     1326, 1326,  533, 1326, 1326,  532, 1326, 1326,  531, 1326,
      529, 1326, 1326, 1326, 1326, 1326, 1326,  528, 1326,  527,
     1326, 1326,  525, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326,  524, 1326,  523, 1326, 1326,  521, 1326, 1326,
     1326,  520, 1326,  519,  518, 1326,  517, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326,  516, 1326, 1326, 1326,  514,
     1326, 1326, 1326, 1326, 1326, 1326,  513, 1326, 1326,  512,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,  511, 1326,
      510, 1326, 1326,  509, 1326, 1326, 1326,  507, 1326,  506,

     1326, 1326,  505, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326,  504, 1326,  503,  502, 1326,  501,  500, 1326,
     1326,  498, 1326, 1326,  497, 1326,  496, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326,  495, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326,  494, 1326, 1326,  493,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,  484, 1326,
      490, 1326, 1326,  489, 1326, 1326, 1326,  487, 1326,  486,
     1326, 1326,  485, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326,  484, 1326, 1326, 1326, 1326,

     1326, 1326,  483, 1326,  482,  481, 1326,  480, 1326, 1326,
     1326, 1326, 1326, 1326,  479, 1326,  478, 1326, 1326,  477,
     1326, 1326,  476, 1326,  475,  470,  469, 1326, 1326, 1326,
      467, 1326, 1326, 1326, 1326, 1326,  466, 1326,  464,  463,
      462,  461,  460,  459, 1326,  458,  457,  456,  455,  454,
      453,  452,  451,  450,  449, 1326, 1326,  448,  445,  444,
      443, 1326,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   97,   97,   97,   97,   97,

       97,   97,   97,   97,   97,   97,   99,   99,   99,   99,
       99,   99,   99,   99,   99,  360,   99,  105,  105,  105,
      105,  442,  105,  105,  105,  105,  105,  105,  108,  108,
      439,  108,  108,  108,  108,  108,  108,  108,  108,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      154,  438,  437,  154,  194,  194,  194,  435,  194,  194,
      434,  194,  194,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  204,  433,  432,  204,  207,  207,
      207,  207,  207,  431,  207,  207,  207,  207,  207,  217,
      430,  429,  428,  427,  217,  217,  426,  217,  219,  425,

      424,  219,  220,  423,  422,  220,  221,  221,  221,  221,
      221,  221,  421,  221,  221,  221,  221,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  231,  420,
      419,  231,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  309,  418,  417,  416,  415,  364,  414,
      413,  412,  309,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  366,  409,  408,  360,  407,  366,
      403,  402,  366,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  465,  465,  465,  465,  465,

      465,  465,  465,  465,  465,  465,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  538,  538,  538,  538,  538,  538,

      538,  538,  538,  538,  538,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  576,  576,  576,  576,  576,  576,  576,

      576,  576,  576,  576,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  594,  594,  594,  594,  594,  594,  594,  594,

      594,  594,  594,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  600,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  612,  612,  612,  612,  612,  612,  612,  612,  612,

      612,  612,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,

      630,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,

      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  668,

      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  686,  686,

      686,  686,  686,  686,  686,  686,  686,  686,  686,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  704,  704,  704,

      704,  704,  704,  704,  704,  704,  704,  704,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  722,  722,  722,  722,

      722,  722,  722,  722,  722,  722,  722,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  758,  758,  758,  758,  758,  758,

      758,  758,  758,  758,  758,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  776,  776,  776,  776,  776,  776,  776,

      776,  776,  776,  776,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  794,  794,  794,  794,  794,  794,  794,  794,

      794,  794,  794,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  812,  812,  812,  812,  812,  812,  812,  812,  812,

      812,  812,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,

      830,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  844,  844,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  846,  846,
      846,  846,  846,  846,  846,  846,  846,  846,  846,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,

      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  856,  856,  856,  856,  856,  856,  856,
      856,  856,  856,  856,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  862,  862,  862,  862,
      862,  862,  862,  862,  862,  862,  862,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  868,

      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  872,  872,  872,  872,  872,  872,  872,  872,  872,
      872,  872,  874,  874,  874,  874,  874,  874,  874,  874,
      874,  874,  874,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  876,  878,  878,  878,  878,  878,  878,
      878,  878,  878,  878,  878,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  886,  886,

      886,  886,  886,  886,  886,  886,  886,  886,  886,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  900,  900,  900,  900,  900,
      900,  900,  900,  900,  900,  900,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  904,  904,  904,

      904,  904,  904,  904,  904,  904,  904,  904,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  912,  912,  912,  912,  912,  912,  912,  912,  912,
      912,  912,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  922,  922,  922,  922,

      922,  922,  922,  922,  922,  922,  922,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  926,  926,
      926,  926,  926,  926,  926,  926,  926,  926,  926,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  940,  940,  940,  940,  940,

      940,  940,  940,  940,  940,  940,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      950,  950,  950,  950,  950,  950,  950,  950,  950,  950,
      950,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  956,  956,  956,  956,  956,  956,  956,
      956,  956,  956,  956,  958,  958,  958,  958,  958,  958,

      958,  958,  958,  958,  958,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  972,  972,  972,  972,  972,  972,  972,  972,  972,
      972,  972,  974,  974,  974,  974,  974,  974,  974,  974,
      974,  974,  974,  976,  976,  976,  976,  976,  976,  976,

      976,  976,  976,  976,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  982,  982,  982,  982,
      982,  982,  982,  982,  982,  982,  982,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  994,  994,  994,  994,  994,  994,  994,  994,

      994,  994,  994,  996,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  996,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1008,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012,

     1012, 1012, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1020, 1020, 1020, 1020, 1020,
     1020, 1020, 1020, 1020, 1020, 1020, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,

     1030, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1036, 1036, 1038, 1038, 1038, 1038, 1038, 1038,
     1038, 1038, 1038, 1038, 1038, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1044, 1044, 1044,
     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1046, 1046,
     1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,

     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1060, 1060, 1060, 1060, 1060,
     1060, 1060, 1060, 1060, 1060, 1060, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1064, 1064, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1066, 1066,
     1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1068,

     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070,
     1070, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
     1076, 1076, 1076, 1076, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1086, 1086,

     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
     1090, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1102, 1102, 1102, 1102,
     1102, 1102, 1102, 1102, 1102, 1102, 1102, 1104, 1104, 1104,

     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
     1112, 1112, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1122, 1122, 1122, 1122,

     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1124, 1124, 1124,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
     1132, 1132, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
     1134, 1134, 1134, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1140, 1140, 1140, 1140, 1140,

     1140, 1140, 1140, 1140, 1140, 1140, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1158, 1158, 1158, 1158, 1158, 1158,

     1158, 1158, 1158, 1158, 1158, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1176, 1176, 1176, 1176, 1176, 1176, 1176,

     1176, 1176, 1176, 1176, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,

     1194, 1194, 1194, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1198, 1198, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1198, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,

     1212, 1212, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1218, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,

     1230, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,

     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1268,

     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1286, 1286,

     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1288,
     1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1302, 1302, 1302, 1302,
     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1304, 1304, 1304,

     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1308,
     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308,
     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310,
     1310, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
     1314, 1314, 1314, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1316, 1318, 1318, 1318, 1318, 1318, 1318,
     1318, 1318, 1318, 1318, 1318, 1320, 1320, 1320, 1320, 1320,
     1320, 1320, 1320, 1320, 1320, 1320, 1322, 1322, 1322, 1322,

     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1324, 1324, 1324,
     1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,  399,  397,
      396,  395,  394,  393,  392,  391,  390,  389,  388,  387,
      386,  385,  384,  383,  382,  381,  380,  379,  378,  377,
      376,  375,  374,  373,  372,  371,  370,  369,  368,  367,
      308,  363,  362,  361,  360,  359,  355,  354,  353,  352,
      351,  350,  349,  345,  344,  343,  342,  341,  340,  339,
      338,  337,  336,  335,  334,  333,  332,  331,  330,  329,
      323,  322,  321,  320,  319,  316,  315,  314,  313,  312,
      311,  310,  252,  308,  307,  306,  305,  304,  303,  302,

      301,  300,  299,  298,  232,  229,  297,  296,  295,  215,
      211, 1326,  208,  205,  290,  289,  288,  287,  286,  285,
      284,  281,  280,  279,  278,  277,  276,  275,  274,  273,
      270,  269,  268,  267,  266,  265,  262,  261,  260,  259,
      258,  257,  256,  251,  250,  247,  109,  242,  241,  240,
      239,  238,  237,  236,  235,  234, 1326,  109,  228,  227,
      225,   98,  224,  222,  211,  208,  206,  205,  197,  191,
      190,  189,  184,  183,  180,  179,  175,  159,  155,  153,
      152,  143,  128,  109,  104,   98, 1326,   96,   96,   21,
       21,   19, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,

     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326
    } ;

static yyconst short int yy_chk[7555] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    7,    8,    9,   10,   11,   21,
       23,   23,   23,   11,   25,   28,   28,   35,   34,   53,
       30,   29,  954,    7,    8,   53,   35,   35,   21,   34,
        9,   10,   11,    9,   10,   11,   12,   29,   25,   30,
       59,   12,   36,   36,   36,   37,   59,   41,   36,  956,
       37,   63,   21,   41,   41,   41,   63,   37,   42,   42,
       12,  958,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   31,  101,   38,   68,   38,   38,
       38,   39,  960,   39,   39,   39,   43,   43,   48,   50,
      112,  112,   48,   48,   50,   51,   38,   83,  101,   51,
       50,   39,  115,   50,  105,   51,   31,   31,   52,   31,
       62,   31,   68,   62,   31,   38,   83,   52,   52,   52,
       31,  115,   56,   31,   31,  962,   31,   52,  105,   52,
       56,   75,   75,   75,  964,   56,   72,   72,   72,   72,

       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   74,   74,
       74,   77,   87,   88,   85,   85,   98,   87,   88,   89,
       89,   90,   90,  109,  109,   77,   77,   85,  103,  103,
      103,  107,   98,  145,  145,   98,  107,  152,  152,   87,
       88,  164,   90,  966,  164,   74,  172,  109,  134,  134,

      134,   85,  139,  139,  139,  184,   89,  172,  184,   98,
      356,  140,   77,  140,  140,  140,  134,  141,  968,  141,
      139,  356,  141,  141,  141,  142,  142,  142,  155,  202,
      202,  140,  218,  218,  155,  198,  198,  198,  970,  142,
      142,  142,  142,  142,  142,  199,  199,  199,  972,  213,
      214,  203,  203,  203,  213,  214,  224,  217,  217,  199,
      199,  199,  199,  199,  199,  203,  203,  203,  203,  203,
      203,  974,  224,  262,  262,  224,  213,  214,  217,  243,
      243,  243,  244,  244,  244,  245,  245,  245,  246,  246,
      246,  292,  292,  269,  976,  269,  978,  243,  269,  224,

      309,  309,  246,  246,  246,  246,  246,  246,  269,  291,
      291,  291,  269,  366,  366,  293,  293,  293,  980,  295,
      982,  349,  984,  291,  291,  291,  291,  291,  291,  293,
      293,  293,  293,  293,  293,  295,  302,  349,  295,  353,
      349,  350,  350,  350,  360,  403,  404,  302,  410,  399,
      353,  437,  413,  545,  545,  360,  403,  404,  440,  410,
      986,  988,  295,  413,  349,  399,  990,  437,  399,  440,
      437,  350,  302,  444,  445,  353,  439,  439,  439,  446,
      466,  468,  468,  468,  444,  445,  469,  470,  992,  471,
      446,  473,  399,  489,  437,  500,  466,  469,  470,  466,

      471,  509,  473,  475,  475,  475,  492,  492,  492,  489,
      516,  500,  489,  994,  500,  996,  523,  509,  527,  998,
      509, 1000, 1002,  466,  468, 1004,  516,  531,  475,  516,
     1006,  492,  523,  535,  527,  523,  489,  527,  500,  537,
      537,  537, 1008,  531,  509, 1010,  531, 1012,  539,  535,
      544, 1014,  535,  516,  541,  541,  541, 1016,  551,  523,
     1018,  527, 1020,  537,  539, 1022,  544,  539,  558,  544,
      531,  542,  542,  542,  551,  542,  535,  551,  541, 1024,
      542,  546,  546,  546,  558,  546,  563,  558,  569, 1026,
      546,  539, 1028,  544,  561,  561,  561,  566,  566,  566,

     1030,  551,  563, 1032,  569,  563, 1034,  569,  571, 1036,
     1038,  558, 1040, 1042,  573, 1044,  575, 1046,  542,  561,
      577,  579,  566, 1048,  571,  581,  583,  571,  546,  563,
      573,  569,  575,  573,  585,  575,  577,  579, 1050,  577,
      579,  581,  583, 1052,  581,  583,  587, 1054, 1056, 1058,
      585,  571, 1060,  585,  589,  591,  593,  573, 1062,  575,
      595, 1064,  587,  577,  579,  587,  597,  599,  581,  583,
      589,  591,  593,  589,  591,  593,  595,  585, 1066,  595,
     1068, 1070,  597,  599, 1072,  597,  599, 1074,  601,  587,
     1076, 1078,  603, 1080, 1082, 1084,  605,  589,  591,  593,

      607,  609,  611,  595,  601, 1086,  613,  601,  603,  597,
      599,  603,  605,  615,  617,  605,  607,  609,  611,  607,
      609,  611,  613, 1088, 1090,  613, 1092, 1094, 1096,  615,
      617,  601,  615,  617,  619,  603,  621, 1098, 1100,  605,
     1102, 1104,  623,  607,  609,  611,  625,  627,  629,  613,
      619, 1106,  621,  619,  631,  621,  615,  617,  623,  633,
     1108,  623,  625,  627,  629,  625,  627,  629,  635, 1110,
      631, 1112, 1114,  631, 1116,  633,  637,  619,  633,  621,
      639, 1118,  641, 1120,  635,  623, 1122,  635,  643,  625,
      627,  629,  637,  645,  647,  637,  639,  631,  641,  639,

     1124,  641,  633, 1126,  643,  649, 1128,  643, 1130,  645,
      647,  635,  645,  647,  651, 1132,  653, 1134, 1136,  637,
     1138,  649,  655,  639,  649,  641,  657,  659,  661, 1140,
      651,  643,  653,  651,  663,  653,  645,  647,  655,  665,
     1142,  655,  657,  659,  661,  657,  659,  661,  649, 1144,
      663, 1146, 1148,  663, 1150,  665,  667,  651,  665,  653,
      669, 1152,  671, 1154,  673,  655, 1156, 1158,  675,  657,
      659,  661,  667,  677,  679,  667,  669,  663,  671,  669,
      673,  671,  665,  673,  675,  681, 1160,  675, 1162,  677,
      679, 1164,  677,  679,  683, 1166,  685, 1168, 1170,  667,

     1172,  681,  687,  669,  681,  671,  689,  673,  691, 1174,
      683,  675,  685,  683,  693,  685,  677,  679,  687,  695,
     1176,  687,  689, 1178,  691,  689, 1180,  691,  681, 1182,
      693,  697, 1184,  693, 1186,  695,  699,  683,  695,  685,
      701, 1188,  703, 1190,  705,  687, 1192,  697,  707,  689,
      697,  691,  699,  709,  711,  699,  701,  693,  703,  701,
      705,  703,  695,  705,  707,  713, 1194,  707, 1196,  709,
      711, 1198,  709,  711,  697, 1200,  715, 1202, 1204,  699,
     1206,  713,  717,  701,  713,  703,  719,  705,  721, 1208,
      723,  707,  715, 1210,  725,  715,  709,  711,  717,  727,

     1212,  717,  719, 1214,  721,  719,  723,  721,  713,  723,
      725,  729, 1216,  725, 1218,  727,  731, 1220,  727,  715,
      733, 1222,  735, 1224,  737,  717, 1226,  729,  739,  719,
      729,  721,  731,  723,  741,  731,  733,  725,  735,  733,
      737,  735,  727,  737,  739,  743, 1228,  739, 1230, 1232,
      741, 1234, 1236,  741,  729, 1238,  745,  747, 1240,  731,
     1242,  743,  749,  733,  743,  735,  751,  737,  753, 1244,
      755,  739,  745,  747,  757,  745,  747,  741,  749,  759,
     1246,  749,  751, 1248,  753,  751,  755,  753,  743,  755,
      757,  761, 1250,  757, 1252,  759,  763, 1254,  759,  745,

      747, 1256,  765, 1258,  767,  749, 1260,  761,  769,  751,
      761,  753,  763,  755,  771,  763,  773,  757,  765, 1262,
      767,  765,  759,  767,  769,  775, 1264,  769, 1266, 1268,
      771, 1270,  773,  771,  761,  773,  777,  779, 1272,  763,
     1274,  775,  781, 1276,  775,  765,  783,  767,  785, 1278,
      787,  769,  777,  779,  789,  777,  779,  771,  781,  773,
     1280,  781,  783, 1282,  785,  783,  787,  785,  775,  787,
      789,  791, 1284,  789, 1286, 1288,  793, 1290, 1292,  777,
      779, 1294,  795,  797,  799,  781, 1296,  791,  801,  783,
      791,  785,  793,  787,  803,  793,  805,  789,  795,  797,

      799,  795,  797,  799,  801,  807, 1298,  801, 1300, 1302,
      803, 1304,  805,  803,  791,  805,  809,  811, 1306,  793,
     1308,  807,  813, 1310,  807,  795,  797,  799,  815, 1312,
      817,  801,  809,  811,  819,  809,  811,  803,  813,  805,
     1314,  813,  821, 1316,  815, 1318,  817,  815,  807,  817,
      819,  823, 1320,  819, 1322, 1334,  825,  952,  821,  809,
      811,  821,  827,  829,  831,  813,  950,  823,  833,  948,
      823,  815,  825,  817,  835,  825,  837,  819,  827,  829,
      831,  827,  829,  831,  833,  821,  946,  833,  944,  942,
      835,  940,  837,  835,  823,  837,  839,  841,  938,  825,

      936,  934,  843,  932,  845,  827,  829,  831,  847,  849,
      851,  833,  839,  841,  853,  839,  841,  835,  843,  837,
      845,  843,  855,  845,  847,  849,  851,  847,  849,  851,
      853,  930,  928,  853,  926,  924,  922,  920,  855,  839,
      841,  855,  857,  859,  861,  843,  918,  845,  863,  916,
      865,  847,  849,  851,  867,  869,  871,  853,  857,  859,
      861,  857,  859,  861,  863,  855,  865,  863,  914,  865,
      867,  869,  871,  867,  869,  871,  873,  912,  910,  908,
      906,  904,  902,  900,  875,  857,  859,  861,  877,  879,
      881,  863,  873,  865,  883,  873,  885,  867,  869,  871,

      875,  887,  889,  875,  877,  879,  881,  877,  879,  881,
      883,  898,  885,  883,  896,  885,  894,  887,  889,  873,
      887,  889,  891,  892,  893,  890,  888,  875,  886,  884,
      895,  877,  879,  881,  897,  899,  901,  883,  891,  885,
      893,  891,  903,  893,  887,  889,  895,  905,  882,  895,
      897,  899,  901,  897,  899,  901,  907,  880,  903,  878,
      876,  903,  874,  905,  909,  891,  905,  893,  911,  872,
      913,  870,  907,  895,  868,  907,  915,  897,  899,  901,
      909,  917,  919,  909,  911,  903,  913,  911,  866,  913,
      905,  864,  915,  921,  862,  915,  860,  917,  919,  907,

      917,  919,  923,  858,  925,  856,  854,  909,  852,  921,
      927,  911,  921,  913,  929,  931,  933,  850,  923,  915,
      925,  923,  935,  925,  917,  919,  927,  937,  848,  927,
      929,  931,  933,  929,  931,  933,  921,  846,  935,  844,
      842,  935,  840,  937,  939,  923,  937,  925,  941,  838,
      943,  836,  945,  927,  834,  832,  947,  929,  931,  933,
      939,  949,  951,  939,  941,  935,  943,  941,  945,  943,
      937,  945,  947,  953,  830,  947,  828,  949,  951,  826,
      949,  951,  955,  824,  957,  822,  820,  939,  818,  953,
      959,  941,  953,  943,  961,  945,  963,  816,  955,  947,

      957,  955,  965,  957,  949,  951,  959,  967,  814,  959,
      961,  812,  963,  961,  810,  963,  953,  808,  965,  969,
      806,  965,  804,  967,  971,  955,  967,  957,  973,  802,
      975,  800,  977,  959,  798,  969,  979,  961,  969,  963,
      971,  981,  983,  971,  973,  965,  975,  973,  977,  975,
      967,  977,  979,  985,  796,  979,  794,  981,  983,  792,
      981,  983,  969,  790,  987,  788,  786,  971,  784,  985,
      989,  973,  985,  975,  991,  977,  993,  782,  995,  979,
      987,  780,  997,  987,  981,  983,  989,  999,  778,  989,
      991,  776,  993,  991,  995,  993,  985,  995,  997, 1001,

      774,  997,  772,  999, 1003,  770,  999,  987, 1005,  768,
     1007,  766, 1009,  989,  764, 1001, 1011,  991, 1001,  993,
     1003,  995, 1013, 1003, 1005,  997, 1007, 1005, 1009, 1007,
      999, 1009, 1011, 1015,  762, 1011,  760,  758, 1013,  756,
      754, 1013, 1001,  752, 1017, 1019,  750, 1003,  748, 1015,
     1021, 1005, 1015, 1007, 1023, 1009, 1025,  746, 1027, 1011,
     1017, 1019, 1029, 1017, 1019, 1013, 1021, 1031,  744, 1021,
     1023,  742, 1025, 1023, 1027, 1025, 1015, 1027, 1029, 1033,
      740, 1029,  738, 1031, 1035,  736, 1031, 1017, 1019,  734,
     1037,  732, 1039, 1021,  730, 1033, 1041, 1023, 1033, 1025,

     1035, 1027, 1043, 1035, 1045, 1029, 1037,  728, 1039, 1037,
     1031, 1039, 1041, 1047,  726, 1041,  724,  722, 1043,  720,
     1045, 1043, 1033, 1045, 1049, 1051,  718, 1035,  716, 1047,
     1053,  714, 1047, 1037, 1055, 1039, 1057,  712, 1059, 1041,
     1049, 1051, 1061, 1049, 1051, 1043, 1053, 1045,  710, 1053,
     1055,  708, 1057, 1055, 1059, 1057, 1047, 1059, 1061, 1063,
      706, 1061,  704,  702, 1065,  700,  698, 1049, 1051,  696,
     1067, 1069, 1071, 1053,  694, 1063, 1073, 1055, 1063, 1057,
     1065, 1059, 1075, 1065, 1077, 1061, 1067, 1069, 1071, 1067,
     1069, 1071, 1073, 1079,  692, 1073,  690,  688, 1075,  686,

     1077, 1075, 1063, 1077, 1081, 1083,  684, 1065,  682, 1079,
     1085,  680, 1079, 1067, 1069, 1071, 1087,  678, 1089, 1073,
     1081, 1083, 1091, 1081, 1083, 1075, 1085, 1077,  676, 1085,
     1093,  674, 1087,  672, 1089, 1087, 1079, 1089, 1091, 1095,
      670, 1091,  668,  666, 1097,  664, 1093, 1081, 1083, 1093,
     1099, 1101, 1103, 1085,  662, 1095, 1105,  660, 1095, 1087,
     1097, 1089, 1107, 1097, 1109, 1091, 1099, 1101, 1103, 1099,
     1101, 1103, 1105, 1093,  658, 1105,  656,  654, 1107,  652,
     1109, 1107, 1095, 1109, 1111, 1113,  650, 1097,  648,  646,
     1115,  644, 1117, 1099, 1101, 1103, 1119, 1121, 1123, 1105,

     1111, 1113, 1125, 1111, 1113, 1107, 1115, 1109, 1117, 1115,
     1127, 1117, 1119, 1121, 1123, 1119, 1121, 1123, 1125,  642,
      640, 1125,  638,  636,  634,  632, 1127, 1111, 1113, 1127,
     1129, 1131, 1133, 1115,  630, 1117, 1135,  628, 1137, 1119,
     1121, 1123, 1139, 1141, 1143, 1125, 1129, 1131, 1133, 1129,
     1131, 1133, 1135, 1127, 1137, 1135,  626, 1137, 1139, 1141,
     1143, 1139, 1141, 1143, 1145,  624,  622,  620,  618,  616,
      614,  612, 1147, 1129, 1131, 1133, 1149, 1151, 1153, 1135,
     1145, 1137, 1155, 1145, 1157, 1139, 1141, 1143, 1147, 1159,
     1161, 1147, 1149, 1151, 1153, 1149, 1151, 1153, 1155,  610,

     1157, 1155,  608, 1157,  606, 1159, 1161, 1145, 1159, 1161,
     1163,  604, 1165,  602,  600, 1147,  598,  596, 1167, 1149,
     1151, 1153, 1169, 1171, 1173, 1155, 1163, 1157, 1165, 1163,
     1175, 1165, 1159, 1161, 1167, 1177,  594, 1167, 1169, 1171,
     1173, 1169, 1171, 1173, 1179,  592, 1175,  590,  588, 1175,
      586, 1177, 1181, 1163, 1177, 1165, 1183,  584, 1185,  582,
     1179, 1167,  580, 1179, 1187, 1169, 1171, 1173, 1181, 1189,
     1191, 1181, 1183, 1175, 1185, 1183,  578, 1185, 1177,  576,
     1187, 1193,  574, 1187,  572, 1189, 1191, 1179, 1189, 1191,
     1195,  570, 1197,  568,  565, 1181,  564, 1193, 1199, 1183,

     1193, 1185, 1201, 1203, 1205,  562, 1195, 1187, 1197, 1195,
     1207, 1197, 1189, 1191, 1199, 1209,  560, 1199, 1201, 1203,
     1205, 1201, 1203, 1205, 1193,  559, 1207,  557,  556, 1207,
      555, 1209, 1211, 1195, 1209, 1197, 1213,  554, 1215,  553,
     1217, 1199,  550,  549, 1219, 1201, 1203, 1205, 1211, 1221,
     1223, 1211, 1213, 1207, 1215, 1213, 1217, 1215, 1209, 1217,
     1219, 1225,  548, 1219,  547, 1221, 1223,  543, 1221, 1223,
     1227,  540, 1229,  538,  536, 1211,  534, 1225, 1231, 1213,
     1225, 1215, 1233, 1217, 1235,  533, 1227, 1219, 1229, 1227,
     1237, 1229, 1221, 1223, 1231, 1239,  532, 1231, 1233,  530,

     1235, 1233,  529, 1235, 1225,  528, 1237, 1241,  526, 1237,
      525, 1239, 1243, 1227, 1239, 1229, 1245,  524, 1247,  522,
     1249, 1231,  518, 1241, 1251, 1233, 1241, 1235, 1243, 1253,
     1255, 1243, 1245, 1237, 1247, 1245, 1249, 1247, 1239, 1249,
     1251, 1257,  517, 1251,  515, 1253, 1255,  514, 1253, 1255,
     1241,  513, 1259,  512,  511, 1243,  510, 1257, 1261, 1245,
     1257, 1247, 1263, 1249, 1265,  508, 1267, 1251, 1259,  507,
     1269, 1259, 1253, 1255, 1261, 1271,  506, 1261, 1263,  505,
     1265, 1263, 1267, 1265, 1257, 1267, 1269, 1273,  502, 1269,
      501, 1271, 1275,  499, 1271, 1259, 1277,  498, 1279,  497,

     1281, 1261,  496, 1273, 1283, 1263, 1273, 1265, 1275, 1267,
     1285, 1275, 1277, 1269, 1279, 1277, 1281, 1279, 1271, 1281,
     1283, 1287,  494, 1283,  493,  491, 1285,  490,  488, 1285,
     1273,  487, 1289, 1291,  486, 1275,  485, 1287, 1293, 1277,
     1287, 1279, 1295, 1281, 1297,  482, 1299, 1283, 1289, 1291,
     1301, 1289, 1291, 1285, 1293, 1303,  481, 1293, 1295,  480,
     1297, 1295, 1299, 1297, 1287, 1299, 1301, 1305,  478, 1301,
      467, 1303, 1307,  465, 1303, 1289, 1291,  464, 1309,  463,
     1311, 1293,  462, 1305, 1313, 1295, 1305, 1297, 1307, 1299,
     1315, 1307, 1317, 1301, 1309,  461, 1311, 1309, 1303, 1311,

     1313, 1319,  458, 1313,  457,  456, 1315,  455, 1317, 1315,
     1305, 1317, 1321, 1323,  452, 1307,  451, 1319, 1325,  450,
     1319, 1309,  449, 1311,  448,  443,  442, 1313, 1321, 1323,
      438, 1321, 1323, 1315, 1325, 1317,  436, 1325,  432,  431,
      430,  428,  427,  426, 1319,  425,  424,  423,  422,  420,
      419,  418,  417,  416,  415, 1321, 1323,  414,  412,  409,
      408, 1325, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1330, 1330, 1330, 1330, 1330,

     1330, 1330, 1330, 1330, 1330, 1330, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1331,  407, 1331, 1332, 1332, 1332,
     1332,  406, 1332, 1332, 1332, 1332, 1332, 1332, 1333, 1333,
      402, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1336,  401,  398, 1336, 1337, 1337, 1337,  395, 1337, 1337,
      394, 1337, 1337, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1339,  393,  392, 1339, 1340, 1340,
     1340, 1340, 1340,  390, 1340, 1340, 1340, 1340, 1340, 1341,
      388,  387,  386,  385, 1341, 1341,  384, 1341, 1342,  383,

      382, 1342, 1343,  380,  379, 1343, 1344, 1344, 1344, 1344,
     1344, 1344,  377, 1344, 1344, 1344, 1344, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1346,  376,
      375, 1346, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1348,  374,  371,  368,  367,  365,  363,
      362,  361, 1348, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1350,  359,  358,  355,  354, 1350,
      352,  351, 1350, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1353, 1353, 1353, 1353, 1353,

     1353, 1353, 1353, 1353, 1353, 1353, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1362, 1362, 1362, 1362, 1362, 1362,

     1362, 1362, 1362, 1362, 1362, 1363, 1363, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1365, 1365, 1365,
     1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
     1370, 1370, 1370, 1371, 1371, 1371, 1371, 1371, 1371, 1371,

     1371, 1371, 1371, 1371, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,
     1378, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
     1379, 1379, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,

     1380, 1380, 1380, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1381, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388,
     1388, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,

     1389, 1389, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,
     1390, 1390, 1390, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1391, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1403, 1403, 1403, 1403, 1403,
     1403, 1403, 1403, 1403, 1403, 1403, 1404, 1404, 1404, 1404,
     1404, 1404, 1404, 1404, 1404, 1404, 1404, 1405, 1405, 1405,
     1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,

     1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
     1408, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1411, 1411, 1411, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1414, 1414, 1414, 1414,
     1414, 1414, 1414, 1414, 1414, 1414, 1414, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1416, 1416,
     1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1417,

     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1421, 1422, 1422, 1422, 1422, 1422, 1422,
     1422, 1422, 1422, 1422, 1422, 1423, 1423, 1423, 1423, 1423,
     1423, 1423, 1423, 1423, 1423, 1423, 1424, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1426, 1426,

     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430,
     1430, 1430, 1430, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1432, 1432, 1432, 1432, 1432, 1432,
     1432, 1432, 1432, 1432, 1432, 1433, 1433, 1433, 1433, 1433,
     1433, 1433, 1433, 1433, 1433, 1433, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1435, 1435, 1435,

     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440,
     1440, 1440, 1440, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1442, 1442, 1442, 1442, 1442, 1442,
     1442, 1442, 1442, 1442, 1442, 1443, 1443, 1443, 1443, 1443,
     1443, 1443, 1443, 1443, 1443, 1443, 1444, 1444, 1444, 1444,

     1444, 1444, 1444, 1444, 1444, 1444, 1444, 1445, 1445, 1445,
     1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
     1449, 1449, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
     1451, 1451, 1451, 1451, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1453, 1453, 1453, 1453, 1453,

     1453, 1453, 1453, 1453, 1453, 1453, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1456, 1456,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1457,
     1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1461, 1461, 1461, 1461, 1461, 1461, 1461,
     1461, 1461, 1461, 1461, 1462, 1462, 1462, 1462, 1462, 1462,

     1462, 1462, 1462, 1462, 1462, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1464, 1464, 1464, 1464,
     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1467,
     1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469,
     1469, 1469, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1471, 1471, 1471, 1471, 1471, 1471, 1471,

     1471, 1471, 1471, 1471, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1475, 1475, 1475,
     1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1476, 1476,
     1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1477,
     1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477,
     1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478,
     1478, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479,
     1479, 1479, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480,

     1480, 1480, 1480, 1481, 1481, 1481, 1481, 1481, 1481, 1481,
     1481, 1481, 1481, 1481, 1482, 1482, 1482, 1482, 1482, 1482,
     1482, 1482, 1482, 1482, 1482, 1483, 1483, 1483, 1483, 1483,
     1483, 1483, 1483, 1483, 1483, 1483, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1486, 1486,
     1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,

     1489, 1489, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1494, 1494, 1494, 1494,
     1494, 1494, 1494, 1494, 1494, 1494, 1494, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1497,
     1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,

     1498, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
     1501, 1501, 1501, 1501, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1503, 1503, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1505, 1505, 1505,
     1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1506, 1506,
     1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1507,
     1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507,

     1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508,
     1508, 1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509,
     1509, 1509, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510,
     1510, 1510, 1510, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1513, 1513, 1513, 1513, 1513,
     1513, 1513, 1513, 1513, 1513, 1513, 1514, 1514, 1514, 1514,
     1514, 1514, 1514, 1514, 1514, 1514, 1514, 1515, 1515, 1515,
     1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1516, 1516,
     1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1517,

     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518,
     1518, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519,
     1519, 1519, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520,
     1520, 1520, 1520, 1521, 1521, 1521, 1521, 1521, 1521, 1521,
     1521, 1521, 1521, 1521, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1523, 1523, 1523, 1523, 1523,
     1523, 1523, 1523, 1523, 1523, 1523, 1524, 1524, 1524, 1524,
     1524, 1524, 1524, 1524, 1524, 1524, 1524, 1525, 1525, 1525,
     1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1526, 1526,

     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528,
     1528, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529,
     1529, 1529, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530,
     1530, 1530, 1530, 1531, 1531, 1531, 1531, 1531, 1531, 1531,
     1531, 1531, 1531, 1531, 1532, 1532, 1532, 1532, 1532, 1532,
     1532, 1532, 1532, 1532, 1532, 1533, 1533, 1533, 1533, 1533,
     1533, 1533, 1533, 1533, 1533, 1533, 1534, 1534, 1534, 1534,
     1534, 1534, 1534, 1534, 1534, 1534, 1534, 1535, 1535, 1535,

     1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1536, 1536,
     1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538,
     1538, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1540, 1541, 1541, 1541, 1541, 1541, 1541, 1541,
     1541, 1541, 1541, 1541, 1542, 1542, 1542, 1542, 1542, 1542,
     1542, 1542, 1542, 1542, 1542, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1544, 1544, 1544, 1544,

     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1545, 1545, 1545,
     1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1547,
     1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549,
     1549, 1549, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550,
     1550, 1550, 1550, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1553, 1553, 1553, 1553, 1553,

     1553, 1553, 1553, 1553, 1553, 1553, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1555, 1555, 1555,
     1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1557,
     1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
     1558, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559,
     1559, 1559, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1562, 1562, 1562, 1562, 1562, 1562,

     1562, 1562, 1562, 1562, 1562, 1563, 1563, 1563, 1563, 1563,
     1563, 1563, 1563, 1563, 1563, 1563, 1564, 1564, 1564, 1564,
     1564, 1564, 1564, 1564, 1564, 1564, 1564, 1565, 1565, 1565,
     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1566, 1566,
     1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1571, 1571, 1571, 1571, 1571, 1571, 1571,

     1571, 1571, 1571, 1571, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1573, 1573, 1573, 1573, 1573,
     1573, 1573, 1573, 1573, 1573, 1573, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1577,
     1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577,
     1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578,
     1578, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579,
     1579, 1579, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,

     1580, 1580, 1580, 1581, 1581, 1581, 1581, 1581, 1581, 1581,
     1581, 1581, 1581, 1581, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1585, 1585, 1585,
     1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1587,
     1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589,

     1589, 1589, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
     1591, 1591, 1591, 1591, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1594, 1594, 1594, 1594,
     1594, 1594, 1594, 1594, 1594, 1594, 1594, 1595, 1595, 1595,
     1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1596, 1596,
     1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1597,
     1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597,
     1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598,

     1598, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599,
     1599, 1599, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1601, 1601, 1601, 1601, 1601, 1601, 1601,
     1601, 1601, 1601, 1601, 1602, 1602, 1602, 1602, 1602, 1602,
     1602, 1602, 1602, 1602, 1602, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1605, 1605, 1605,
     1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,

     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1611, 1611, 1611, 1611, 1611, 1611, 1611,
     1611, 1611, 1611, 1611, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1615, 1615, 1615,
     1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1617,

     1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619,
     1619, 1619, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620,
     1620, 1620, 1620, 1621, 1621, 1621, 1621, 1621, 1621, 1621,
     1621, 1621, 1621, 1621, 1622, 1622, 1622, 1622, 1622, 1622,
     1622, 1622, 1622, 1622, 1622, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1625, 1625, 1625,
     1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1626, 1626,

     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1627,
     1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
     1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628,
     1628, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630,
     1630, 1630, 1630, 1631, 1631, 1631, 1631, 1631, 1631, 1631,
     1631, 1631, 1631, 1631, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1633, 1633, 1633, 1633, 1633,
     1633, 1633, 1633, 1633, 1633, 1633, 1634, 1634, 1634, 1634,
     1634, 1634, 1634, 1634, 1634, 1634, 1634, 1635, 1635, 1635,

     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1636, 1636,
     1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1637,
     1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1641, 1641, 1641, 1641, 1641, 1641, 1641,
     1641, 1641, 1641, 1641, 1642, 1642, 1642, 1642, 1642, 1642,
     1642, 1642, 1642, 1642, 1642, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1644, 1644, 1644, 1644,

     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1647,
     1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
     1650, 1650, 1650, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1652, 1652, 1652, 1652, 1652, 1652,
     1652, 1652, 1652, 1652, 1652, 1653, 1653, 1653, 1653, 1653,

     1653, 1653, 1653, 1653, 1653, 1653, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1655, 1655, 1655,
     1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655, 1656, 1656,
     1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1657,
     1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657,
     1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658,
     1658, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659,
     1659, 1659, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660,
     1660, 1660, 1660, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1662, 1662, 1662, 1662, 1662, 1662,

     1662, 1662, 1662, 1662, 1662, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1663, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1665, 1665, 1665,
     1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
     1668, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1671, 1671, 1671, 1671, 1671, 1671, 1671,

     1671, 1671, 1671, 1671, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1675, 1675, 1675,
     1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1676, 1676,
     1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1677,
     1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1678, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679,
     1679, 1679, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680,

     1680, 1680, 1680, 1681, 1681, 1681, 1681, 1681, 1681, 1681,
     1681, 1681, 1681, 1681, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1683, 1683, 1683, 1683, 1683,
     1683, 1683, 1683, 1683, 1683, 1683, 1684, 1684, 1684, 1684,
     1684, 1684, 1684, 1684, 1684, 1684, 1684, 1685, 1685, 1685,
     1685, 1685, 1685, 1685, 1685, 1685, 1685, 1685, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1687,
     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
     1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688,
     1688, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,

     1689, 1689, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
     1690, 1690, 1690, 1691, 1691, 1691, 1691, 1691, 1691, 1691,
     1691, 1691, 1691, 1691, 1692, 1692, 1692, 1692, 1692, 1692,
     1692, 1692, 1692, 1692, 1692, 1693, 1693, 1693, 1693, 1693,
     1693, 1693, 1693, 1693, 1693, 1693, 1694, 1694, 1694, 1694,
     1694, 1694, 1694, 1694, 1694, 1694, 1694, 1695, 1695, 1695,
     1695, 1695, 1695, 1695, 1695, 1695, 1695, 1695, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,

     1698, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699,
     1699, 1699, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1700, 1700, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1702, 1702, 1702, 1702, 1702, 1702,
     1702, 1702, 1702, 1702, 1702, 1703, 1703, 1703, 1703, 1703,
     1703, 1703, 1703, 1703, 1703, 1703, 1704, 1704, 1704, 1704,
     1704, 1704, 1704, 1704, 1704, 1704, 1704, 1705, 1705, 1705,
     1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1706, 1706,
     1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1707,
     1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707,

     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
     1708, 1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709,
     1709, 1709, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710,
     1710, 1710, 1710, 1711, 1711, 1711, 1711, 1711, 1711, 1711,
     1711, 1711, 1711, 1711, 1712, 1712, 1712, 1712, 1712, 1712,
     1712, 1712, 1712, 1712, 1712, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1715, 1715, 1715,
     1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715, 1716, 1716,
     1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1717,

     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
     1718, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719,
     1719, 1719, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720,
     1720, 1720, 1720, 1721, 1721, 1721, 1721, 1721, 1721, 1721,
     1721, 1721, 1721, 1721, 1722, 1722, 1722, 1722, 1722, 1722,
     1722, 1722, 1722, 1722, 1722, 1723, 1723, 1723, 1723, 1723,
     1723, 1723, 1723, 1723, 1723, 1723, 1724, 1724, 1724, 1724,
     1724, 1724, 1724, 1724, 1724, 1724, 1724, 1725, 1725, 1725,
     1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1726, 1726,

     1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728,
     1728, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729,
     1729, 1729, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730,
     1730, 1730, 1730, 1731, 1731, 1731, 1731, 1731, 1731, 1731,
     1731, 1731, 1731, 1731, 1732, 1732, 1732, 1732, 1732, 1732,
     1732, 1732, 1732, 1732, 1732, 1733, 1733, 1733, 1733, 1733,
     1733, 1733, 1733, 1733, 1733, 1733, 1734, 1734, 1734, 1734,
     1734, 1734, 1734, 1734, 1734, 1734, 1734, 1735, 1735, 1735,

     1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1736, 1736,
     1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1737,
     1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739,
     1739, 1739, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1741, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1742, 1742, 1742, 1742, 1742, 1742,
     1742, 1742, 1742, 1742, 1742, 1743, 1743, 1743, 1743, 1743,
     1743, 1743, 1743, 1743, 1743, 1743, 1744, 1744, 1744, 1744,

     1744, 1744, 1744, 1744, 1744, 1744, 1744, 1745, 1745, 1745,
     1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745,  348,  345,
      344,  343,  342,  341,  340,  339,  338,  336,  335,  334,
      333,  332,  331,  328,  327,  326,  325,  324,  323,  322,
      320,  319,  318,  317,  316,  315,  313,  312,  311,  310,
      308,  307,  306,  305,  304,  303,  301,  300,  299,  298,
      297,  296,  294,  289,  286,  285,  284,  283,  282,  281,
      280,  278,  277,  276,  275,  274,  273,  272,  271,  270,
      268,  267,  266,  264,  263,  261,  260,  259,  258,  257,
      255,  254,  253,  248,  247,  242,  241,  240,  239,  238,

      237,  236,  235,  234,  233,  230,  227,  226,  223,  216,
      211,  208,  207,  205,  191,  190,  189,  188,  187,  186,
      185,  183,  181,  180,  179,  178,  177,  175,  174,  173,
      171,  170,  169,  168,  167,  165,  163,  162,  161,  160,
      159,  157,  156,  151,  148,  144,  137,  127,  126,  125,
      124,  123,  122,  121,  120,  119,  117,  108,  104,  102,
      100,   99,   97,   96,   84,   81,   80,   79,   73,   66,
       65,   64,   61,   60,   58,   57,   54,   49,   46,   45,
       44,   40,   33,   26,   24,   20,   19,   18,   17,    2,
        1, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,

     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() (yy_more_flag = 1)
#define YY_MORE_ADJ yy_more_len
#define YY_RESTORE_YY_MORE_OFFSET
#define INITIAL 0

/*
   +----------------------------------------------------------------------+
   | Zend Engine                                                          |
   +----------------------------------------------------------------------+
   | Copyright (c) 1998-2000 Zend Technologies Ltd. (http://www.zend.com) |
   +----------------------------------------------------------------------+
   | This source file is subject to version 0.92 of the Zend license,     |
   | that is bundled with this package in the file LICENSE, and is        | 
   | available at through the world-wide-web at                           |
   | http://www.zend.com/license/0_92.txt.                                |
   | If you did not receive a copy of the Zend license and are unable to  |
   | obtain it through the world-wide-web, please send a note to          |
   | license@zend.com so we can mail you a copy immediately.              |
   +----------------------------------------------------------------------+
   | Authors: Andi Gutmans <andi@zend.com>                                |
   |          Zeev Suraski <zeev@zend.com>                                |
   +----------------------------------------------------------------------+
*/

#define ST_IN_SCRIPTING 1

#define ST_DOUBLE_QUOTES 2

#define ST_SINGLE_QUOTE 3

#define ST_BACKQUOTE 4

#define ST_HEREDOC 5

#define ST_LOOKING_FOR_PROPERTY 6

#define ST_LOOKING_FOR_VARNAME 7

#define ST_COMMENT 8

#define YY_STACK_USED 1

#ifdef ZEND_WIN32
#include <io.h>
#endif

#include <errno.h>
#include <limits.h>
#include "zend.h"
#include "zend_alloc.h"
#include "zend_language_parser.h"
#include "zend_compile.h"
#include "zend_language_scanner.h"
#include "zend_highlight.h"
#include "zend_constants.h"
#include "zend_variables.h"
#include "zend_operators.h"

#ifdef ZTS
# include <fstream.h>
# ifdef HAVE_STDIOSTR_H
#  include <stdiostr.h>
# endif
# ifdef HAVE_STDIOSTREAM_H
#  include <stdiostream.h>
# endif
# ifdef ZEND_WIN32
#  include <strstrea.h>
# else
#  include <strstream.h>
# endif
#endif

#ifdef HAVE_STDARG_H
# include <stdarg.h>
#endif

#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif

#ifdef ZTS
#define YY_DECL int ZendFlexLexer::lex_scan(zval *zendlval CLS_DC)
#else
#define YY_DECL int lex_scan(zval *zendlval CLS_DC)
#endif

#define ECHO { ZEND_WRITE( yytext, yyleng ); }

#ifdef ZTS
#  define MY_INPUT yyinput
#else
#  define MY_INPUT input
#endif

#if defined(ZTS) && !defined(HAVE_CLASS_ISTDIOSTREAM)
class istdiostream : public istream
{
private:
	stdiobuf _file;
public:
	istdiostream (FILE* __f) : istream(), _file(__f) { init(&_file); }
	stdiobuf* rdbuf()/* const */ { return &_file; }
};
#endif

#define YY_FATAL_ERROR zend_fatal_scanner_error

#define HANDLE_NEWLINES(s,l) \
do { \
	char *p = (s),*boundary = p+(l); \
\
	while(p<boundary) { \
		if (*p++=='\n') { \
			CG(zend_lineno)++; \
		} \
	} \
} while(0)

#define HANDLE_NEWLINE(c) \
{ \
	if (c=='\n') { \
		CG(zend_lineno)++; \
	} \
}
		

#define ZEND_IS_OCT(c)  ((c)>='0' && (c)<'8')
#define ZEND_IS_HEX(c)  (((c)>='0' && (c)<='9') || ((c)>='a' && (c)<='f') || ((c)>='A' && (c)<='F'))


void zend_fatal_scanner_error(char *message)
{
	zend_error(E_COMPILE_ERROR, message);
}

BEGIN_EXTERN_C()
void startup_scanner(CLS_D)
{
	CG(heredoc) = NULL;
	CG(heredoc_len)=0;
}


void shutdown_scanner(CLS_D)
{
	if (CG(heredoc)) {
		efree(CG(heredoc));
		CG(heredoc_len)=0;
	}
}
END_EXTERN_C()


static inline void save_lexical_state(zend_lex_state *lex_state CLS_DC)
{
#ifndef ZTS
	memcpy(&lex_state->buffer_state,&YY_CURRENT_BUFFER,sizeof(YY_BUFFER_STATE));
	lex_state->in = yyin;
	lex_state->state = YYSTATE;
#else
	lex_state->ZFL = CG(ZFL);
#endif
	lex_state->filename = zend_get_compiled_filename(CLS_C);
	lex_state->lineno = CG(zend_lineno);
}


inline void restore_lexical_state(zend_lex_state *lex_state CLS_DC)
{
#ifndef ZTS
	YY_BUFFER_STATE original_buffer_state = YY_CURRENT_BUFFER;

	if (lex_state->buffer_state) {
		yy_switch_to_buffer(lex_state->buffer_state);
	} else {
		YY_CURRENT_BUFFER = NULL;
	}
		
	yy_delete_buffer(original_buffer_state);
	yyin = lex_state->in;
	BEGIN(lex_state->state);
#else
	delete((ZendFlexLexer *) CG(ZFL));
	CG(ZFL) = lex_state->ZFL;
#endif
	CG(zend_lineno) = lex_state->lineno;
	zend_restore_compiled_filename(lex_state->filename);
}


BEGIN_EXTERN_C()


ZEND_API void zend_file_handle_dtor(zend_file_handle *fh)
{
	switch (fh->type) {
		case ZEND_HANDLE_FP:
			fclose(fh->handle.fp);
			break;
		case ZEND_HANDLE_FILENAME:
			/* We're only supposed to get here when destructing the used_files hash,
			 * which doesn't really contain open files, but references to their names/paths
			 */
			break;
#ifdef ZTS
		case ZEND_HANDLE_FSTREAM:
			delete ((ifstream *) fh->handle.is);
			break;
		case ZEND_HANDLE_STDIOSTREAM:
			istdiostream *pstdiostream = (istdiostream *) fh->handle.is;
			
			fclose(pstdiostream->rdbuf()->stdiofile());
			delete pstdiostream;
			break;
#endif
	}
	if (fh->opened_path) {
		efree(fh->opened_path);
	}
	if (fh->free_filename && fh->filename) {
		efree(fh->filename);
	}
}


int zend_compare_file_handles(zend_file_handle *fh1, zend_file_handle *fh2)
{
	if (fh1->type != fh2->type) {
		return 0;
	}
	switch (fh1->type) {
		case ZEND_HANDLE_FP:
			return fh1->handle.fp==fh2->handle.fp;
			break;
#ifdef ZTS
		case ZEND_HANDLE_FSTREAM:
		case ZEND_HANDLE_STDIOSTREAM:
			return fh1->handle.is==fh2->handle.is;
			break;
#endif
	}
	return 0;
}


ZEND_API void zend_destroy_file_handle(zend_file_handle *file_handle CLS_DC)
{
	zend_llist_del_element(&CG(open_files), file_handle, (int (*)(void *, void *)) zend_compare_file_handles);
}


ZEND_API int open_file_for_scanning(zend_file_handle *file_handle CLS_DC)
{
	char *file_path=NULL;

#ifndef ZTS
	switch (file_handle->type) {
		case ZEND_HANDLE_FILENAME:
			file_handle->handle.fp = zend_fopen(file_handle->filename, &file_handle->opened_path);
		    file_path = file_handle->opened_path; 
			break;
		case ZEND_HANDLE_FD:
		  /* file_handle->opened_path = NULL; */
			file_handle->handle.fp = fdopen(file_handle->handle.fd, "r");
			break;
		case ZEND_HANDLE_FP:
		  /* file_handle->opened_path = NULL; */
			file_handle->handle.fp = file_handle->handle.fp;
			break;
	}
	if (!file_handle->handle.fp) {
		return FAILURE;
	}
	if (!file_path) {
		file_path = file_handle->filename;
	}
	file_handle->type = ZEND_HANDLE_FP;	
	if (file_handle->handle.fp != stdin) {
		zend_llist_add_element(&CG(open_files), file_handle);
	}
	/* Reset the scanner for scanning the new file */
	yyin = file_handle->handle.fp;
	yy_switch_to_buffer(yy_create_buffer(yyin, YY_BUF_SIZE));
	BEGIN(INITIAL);
#else
	switch (file_handle->type) {
		case ZEND_HANDLE_FD:
		  /* file_handle->opened_path = NULL; */
			file_handle->handle.is = new ifstream(file_handle->handle.fd);
			file_handle->type = ZEND_HANDLE_FSTREAM;
			break;
		case ZEND_HANDLE_FILENAME:
			{
				file_handle->handle.fp = zend_fopen(file_handle->filename, &file_handle->opened_path);
				if (!file_handle->handle.fp) {
					return FAILURE;
				}
				file_handle->handle.is = new istdiostream(file_handle->handle.fp);
				file_handle->type = ZEND_HANDLE_STDIOSTREAM;
				break;
			}
		case ZEND_HANDLE_FP:
		  /* file_handle->opened_path = NULL; */
			if (file_handle->handle.fp==stdin) {
				file_handle->handle.is = &cin;
			} else {
				if (!file_handle->handle.fp) {
					return FAILURE;
				}
				file_handle->handle.is = new istdiostream(file_handle->handle.fp);
				file_handle->type = ZEND_HANDLE_STDIOSTREAM;
			}	
			break;
	}

	file_path = file_handle->filename;

	if (file_handle->handle.is->fail()) {
		delete file_handle->handle.is;
		return FAILURE;
	}
	if (file_handle->handle.is != &cin) {
		zend_llist_add_element(&CG(open_files), file_handle);
	}

	CG(ZFL) = new ZendFlexLexer;
	CG(ZFL)->switch_streams(file_handle->handle.is, &cout);
#endif
	zend_set_compiled_filename(file_path);
	CG(zend_lineno) = 1;
	return SUCCESS;
}
END_EXTERN_C()


ZEND_API zend_op_array *compile_file(zend_file_handle *file_handle, int type CLS_DC)
{
	zend_lex_state original_lex_state;
	zend_op_array *op_array = (zend_op_array *) emalloc(sizeof(zend_op_array));
	zend_op_array *original_active_op_array = CG(active_op_array);
	zend_op_array *retval=NULL;
	int compiler_result;
	zend_bool compilation_successful=0;
	znode retval_znode;
	zend_bool original_in_compilation = CG(in_compilation);

	retval_znode.op_type = IS_CONST;
	retval_znode.u.constant.type = IS_LONG;
	retval_znode.u.constant.value.lval = 1;
	retval_znode.u.constant.is_ref = 0;
	retval_znode.u.constant.refcount = 1;

	save_lexical_state(&original_lex_state CLS_CC);

	retval = op_array; /* success oriented */

	if (open_file_for_scanning(file_handle CLS_CC)==FAILURE) {
		if (type==ZEND_REQUIRE) {
			zend_message_dispatcher(ZMSG_FAILED_REQUIRE_FOPEN, file_handle->filename);
			zend_bailout();		
		} else {
			zend_message_dispatcher(ZMSG_FAILED_INCLUDE_FOPEN, file_handle->filename);
		}
		compilation_successful=0;
	} else {
		init_op_array(op_array, ZEND_USER_FUNCTION, INITIAL_OP_ARRAY_SIZE CLS_CC);
		CG(in_compilation) = 1;
		CG(active_op_array) = op_array;
		compiler_result = zendparse(CLS_C);
		zend_do_return(&retval_znode, 0 CLS_CC);
		CG(in_compilation) = original_in_compilation;
		if (compiler_result==1) { /* parser error */
			CG(unclean_shutdown) = 1;
			retval = NULL;
		}
		compilation_successful=1;
	}

	if (retval) {
		CG(active_op_array) = original_active_op_array;
		if (compilation_successful) {
			pass_two(op_array);
		} else {
			efree(op_array);
			retval = NULL;
		}
	}
	if (compilation_successful) {
		restore_lexical_state(&original_lex_state CLS_CC);
	}
	return retval;
}


zend_op_array *compile_filename(int type, zval *filename CLS_DC ELS_DC)
{
	zend_file_handle file_handle;
	zval tmp;
	zend_op_array *retval;

	if (filename->type != IS_STRING) {
		tmp = *filename;
		zval_copy_ctor(&tmp);
		convert_to_string(&tmp);
		filename = &tmp;
	}
	file_handle.filename = filename->value.str.val;
	file_handle.free_filename = 0;
	file_handle.type = ZEND_HANDLE_FILENAME;
	file_handle.opened_path = NULL;


	retval = zend_compile_file(&file_handle, type CLS_CC);
	if (retval && file_handle.opened_path) {
		int dummy = 1;
		zend_hash_add(&EG(included_files), file_handle.opened_path, strlen(file_handle.opened_path)+1, (void *)&dummy, sizeof(int), NULL);
	}
	zend_destroy_file_handle(&file_handle CLS_CC);

	if (filename==&tmp) {
		zval_dtor(&tmp);
	}
	return retval;
}

#ifndef ZTS
static inline int prepare_string_for_scanning(zval *str, char *filename)
#else
static inline int prepare_string_for_scanning(zval *str, istrstream **input_stream, char *filename CLS_DC)
#endif
{
#ifndef ZTS
	/* enforce two trailing NULLs for flex... */
	STR_REALLOC(str->value.str.val, str->value.str.len+2);

	str->value.str.val[str->value.str.len+1]=0;

	yyin=NULL;
	yy_scan_buffer(str->value.str.val, str->value.str.len+2);
#else
	*input_stream = new istrstream(str->value.str.val, str->value.str.len);
	CG(ZFL) = new ZendFlexLexer;

	CG(ZFL)->switch_streams(*input_stream, &cout);
#endif
	zend_set_compiled_filename(filename);
	CG(zend_lineno) = 1;
	return SUCCESS;
}


zend_op_array *compile_string(zval *source_string, char *filename CLS_DC)
{
	zend_lex_state original_lex_state;
	zend_op_array *op_array = (zend_op_array *) emalloc(sizeof(zend_op_array));
	zend_op_array *original_active_op_array = CG(active_op_array);
	zend_op_array *retval;
	zval tmp;
	int compiler_result;
	zend_bool original_in_compilation = CG(in_compilation);
#ifdef ZTS
	istrstream *input_stream;
#endif

	if (source_string->value.str.len==0) {
		efree(op_array);
		return NULL;
	}

	CG(in_compilation) = 1;

	tmp = *source_string;
	zval_copy_ctor(&tmp);
	convert_to_string(&tmp);
	source_string = &tmp;

	save_lexical_state(&original_lex_state CLS_CC);
#ifndef ZTS
	if (prepare_string_for_scanning(source_string, filename)==FAILURE) {
#else
	if (prepare_string_for_scanning(source_string, &input_stream, filename CLS_CC)==FAILURE) {
#endif
		efree(op_array);
		retval = NULL;
	} else {
		init_op_array(op_array, ZEND_EVAL_CODE, INITIAL_OP_ARRAY_SIZE CLS_CC);
		CG(active_op_array) = op_array;
#ifndef ZTS
		BEGIN(ST_IN_SCRIPTING);
#else
		CG(ZFL)->BeginState(ST_IN_SCRIPTING);
#endif
		compiler_result = zendparse(CLS_C);
		
		if (compiler_result==1) {
			CG(active_op_array) = original_active_op_array;
			CG(unclean_shutdown)=1;
			retval = NULL;
		} else {
			zend_do_return(NULL, 0 CLS_CC);
			CG(active_op_array) = original_active_op_array;
			pass_two(op_array);
			retval = op_array;
		}
		restore_lexical_state(&original_lex_state CLS_CC);
	}
#ifdef ZTS
	delete input_stream;
#endif
	zval_dtor(&tmp);
	CG(in_compilation) = original_in_compilation;
	return retval;
}


BEGIN_EXTERN_C()
int highlight_file(char *filename, zend_syntax_highlighter_ini *syntax_highlighter_ini)
{
	zend_lex_state original_lex_state;
	zend_file_handle file_handle;
	CLS_FETCH();

	file_handle.type = ZEND_HANDLE_FILENAME;
	file_handle.filename = filename;
	file_handle.free_filename = 0;
	file_handle.opened_path = NULL;
	save_lexical_state(&original_lex_state CLS_CC);
	if (open_file_for_scanning(&file_handle CLS_CC)==FAILURE) {
		zend_message_dispatcher(ZMSG_FAILED_HIGHLIGHT_FOPEN, filename);
		return FAILURE;
	}
	zend_highlight(syntax_highlighter_ini);
	zend_destroy_file_handle(&file_handle CLS_CC);
	restore_lexical_state(&original_lex_state CLS_CC);
	return SUCCESS;
}

int highlight_string(zval *str, zend_syntax_highlighter_ini *syntax_highlighter_ini, char *str_name)
{
	zend_lex_state original_lex_state;
	zval tmp = *str;
#ifdef ZTS
	istrstream *input_stream;
#endif
	CLS_FETCH();

	str = &tmp;
	zval_copy_ctor(str);
	save_lexical_state(&original_lex_state CLS_CC);
#ifndef ZTS
	if (prepare_string_for_scanning(str, str_name)==FAILURE) {
#else
	if (prepare_string_for_scanning(str, &input_stream, str_name CLS_CC)==FAILURE) {
#endif
		return FAILURE;
	}
	zend_highlight(syntax_highlighter_ini);
	restore_lexical_state(&original_lex_state CLS_CC);
#ifdef ZTS
	delete input_stream;
#endif
	zval_dtor(str);
	return SUCCESS;
}
END_EXTERN_C()

#ifdef ZTS
BEGIN_EXTERN_C()
int lex_scan(zval *zendlval CLS_DC)
{
	return CG(ZFL)->lex_scan(zendlval CLS_CC);
}


const char *zend_get_zendtext(CLS_D)
{
	return CG(ZFL)->YYText();
}


int zend_get_zendleng(CLS_D)
{
	return CG(ZFL)->YYLeng();
}
END_EXTERN_C()


void ZendFlexLexer::BeginState(int state)
{
	BEGIN(state);
}


ZendFlexLexer::~ZendFlexLexer()
{
	if (yy_start_stack) {
		yy_flex_free(yy_start_stack);
	}
}


int yyFlexLexer::yylex()
{
	fprintf(stderr, "Error:  yyFlexLexer::yylex() called\n");
	return -1;
}

#endif


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;




	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_more_len = 0;
		if ( yy_more_flag )
			{
			yy_more_len = yy_c_buf_p - yytext_ptr;
			yy_more_flag = 0;
			}
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1327 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1326 );
		yy_cp = yy_last_accepting_cpos;
		yy_current_state = yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{
	return T_EXIT;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
	return T_EXIT;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
	return T_OLD_FUNCTION;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
	return T_FUNCTION;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
	return T_CONST;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
	return T_RETURN;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
	return T_IF;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
	return T_ELSEIF;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
	return T_ENDIF;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
	return T_ELSE;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
	return T_WHILE;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
	return T_ENDWHILE;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
	return T_DO;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
	return T_FOR;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
	return T_ENDFOR;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
	return T_FOREACH;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
	return T_ENDFOREACH;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
	return T_DECLARE;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
	return T_ENDDECLARE;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
	return T_AS;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
	return T_SWITCH;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
	return T_ENDSWITCH;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
	return T_CASE;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
	return T_DEFAULT;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
{
	return T_BREAK;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
	return T_CONTINUE;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
	return T_ECHO;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
	return T_PRINT;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
	return T_CLASS;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
	return T_EXTENDS;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
	yy_push_state(ST_LOOKING_FOR_PROPERTY);
	return T_OBJECT_OPERATOR;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
	yy_pop_state();
	zendlval->value.str.val = (char *)estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	return T_STRING;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
	/*unput(yytext[0]);*/
	yyless(0);
	yy_pop_state();
}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
	return T_PAAMAYIM_NEKUDOTAYIM;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
	return T_NEW;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
	return T_VAR;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
	return T_INT_CAST;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
	return T_DOUBLE_CAST;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
	return T_STRING_CAST;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
	return T_ARRAY_CAST;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
	return T_OBJECT_CAST;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
	return T_BOOL_CAST;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
	return T_UNSET_CAST;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
	return T_EVAL;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
	return T_INCLUDE;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
	return T_INCLUDE_ONCE;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
	return T_REQUIRE;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
	return T_REQUIRE_ONCE;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
	return T_USE;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
	return T_GLOBAL;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
	return T_ISSET;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
{
	return T_EMPTY;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
{
	return T_STATIC;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
{
	return T_UNSET;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
{
	return T_DOUBLE_ARROW;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
{
	return T_LIST;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
{
	return T_ARRAY;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
	return T_INC;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
{
	return T_DEC;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
{
	return T_IS_IDENTICAL;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
{
	return T_IS_NOT_IDENTICAL;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
{
	return T_IS_EQUAL;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
	return T_IS_NOT_EQUAL;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
{
	return T_IS_SMALLER_OR_EQUAL;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
{
	return T_IS_GREATER_OR_EQUAL;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
{
	return T_PLUS_EQUAL;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
{
	return T_MINUS_EQUAL;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
{
	return T_MUL_EQUAL;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
{
	return T_DIV_EQUAL;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
	return T_CONCAT_EQUAL;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
	return T_MOD_EQUAL;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
	return T_SL_EQUAL;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
	return T_SR_EQUAL;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
	return T_AND_EQUAL;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
	return T_OR_EQUAL;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
	return T_XOR_EQUAL;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
	return T_BOOLEAN_OR;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
	return T_BOOLEAN_AND;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{
	return T_LOGICAL_OR;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{
	return T_LOGICAL_AND;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
	return T_LOGICAL_XOR;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
{
	return T_SL;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
{
	return T_SR;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
{
	return yytext[0];
}
	YY_BREAK
case 85:
YY_RULE_SETUP
{
	yy_push_state(ST_IN_SCRIPTING);
	return '{';
}
	YY_BREAK
case 86:
YY_RULE_SETUP
{
	yy_push_state(ST_LOOKING_FOR_VARNAME);
	return T_DOLLAR_OPEN_CURLY_BRACES;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
{
	/* This is a temporary fix which is dependant on flex and it's implementation */
	if (yy_start_stack_ptr) {
		yy_pop_state();
	}
	return '}';
}
	YY_BREAK
case 88:
YY_RULE_SETUP
{
	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	yy_pop_state();
	yy_push_state(ST_IN_SCRIPTING);
	return T_STRING_VARNAME;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
{
	/*unput(yytext[0]);*/
	yyless(0);
	yy_pop_state();
	yy_push_state(ST_IN_SCRIPTING);
}
	YY_BREAK
case 90:
YY_RULE_SETUP
{
	errno = 0;
	zendlval->value.lval = strtol(yytext, NULL, 0);
	if (errno == ERANGE) { /* overflow */
		zendlval->value.dval = strtod(yytext,NULL);
		zendlval->type = IS_DOUBLE;
		return T_DNUMBER;
	} else {
		zendlval->type = IS_LONG;
		return T_LNUMBER;
	}
}
	YY_BREAK
case 91:
YY_RULE_SETUP
{
	errno = 0;
	zendlval->value.lval = strtoul(yytext, NULL, 16);
	if (errno == ERANGE) { /* overflow */
		/* not trying strtod - it returns trash on 0x-es */
		zendlval->value.lval = LONG_MAX; /* maximal long */
		zend_error(E_NOTICE,"Hex number is too big: %s",yytext);
	} else {
		if(zendlval->value.lval < 0) {
			/* maintain consistency with the old way */
			zendlval->value.dval = (unsigned long) zendlval->value.lval;
			zendlval->type = IS_DOUBLE;
			return T_DNUMBER;
		}
		zendlval->type = IS_LONG;
	}
	zendlval->type = IS_LONG;
	return T_LNUMBER;
}
	YY_BREAK
case 92:
YY_RULE_SETUP
{ /* treat numbers (almost) as strings inside encapsulated strings */
	zendlval->value.str.val = (char *)estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	return T_NUM_STRING;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
{
	zendlval->value.dval = strtod(yytext,NULL);
	zendlval->type = IS_DOUBLE;
	return T_DNUMBER;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
{
	zendlval->value.lval = CG(zend_lineno);
	zendlval->type = IS_LONG;
	return T_LINE;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
{
	char *filename = zend_get_compiled_filename(CLS_C);
	
	if (!filename) {
		filename = "";
	}
	zendlval->value.str.len = strlen(filename);
	zendlval->value.str.val = estrndup(filename,zendlval->value.str.len);
	zendlval->type = IS_STRING;
	return T_FILE;
}
	YY_BREAK
case 96:
YY_RULE_SETUP
{
	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	HANDLE_NEWLINES(yytext,yyleng);
	return T_INLINE_HTML;
}
	YY_BREAK
case 97:
YY_RULE_SETUP
{
	HANDLE_NEWLINES(yytext,yyleng);
	if (CG(short_tags) || yyleng>2) { /* yyleng>2 means it's not <? but <script> */
		zendlval->value.str.val = yytext; /* no copying - intentional */
		zendlval->value.str.len = yyleng;
		zendlval->type = IS_STRING;
		BEGIN(ST_IN_SCRIPTING);
		return T_OPEN_TAG;
	} else {
		zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
		zendlval->value.str.len = yyleng;
		zendlval->type = IS_STRING;
		return T_INLINE_HTML;
	}
}
	YY_BREAK
case 98:
YY_RULE_SETUP
{
	if ((yytext[1]=='%' && CG(asp_tags))
		|| (yytext[1]=='?' && CG(short_tags))) {
		zendlval->value.str.val = yytext; /* no copying - intentional */
		zendlval->value.str.len = yyleng;
		zendlval->type = IS_STRING;
		BEGIN(ST_IN_SCRIPTING);
		return T_OPEN_TAG_WITH_ECHO;
	} else {
		zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
		zendlval->value.str.len = yyleng;
		zendlval->type = IS_STRING;
		return T_INLINE_HTML;
	}
}
	YY_BREAK
case 99:
YY_RULE_SETUP
{
	if (CG(asp_tags)) {
		zendlval->value.str.val = yytext; /* no copying - intentional */
		zendlval->value.str.len = yyleng;
		zendlval->type = IS_STRING;
		BEGIN(ST_IN_SCRIPTING);
		return T_OPEN_TAG;
	} else {
		zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
		zendlval->value.str.len = yyleng;
		zendlval->type = IS_STRING;
		return T_INLINE_HTML;
	}
}
	YY_BREAK
case 100:
YY_RULE_SETUP
{
	zendlval->value.str.val = yytext; /* no copying - intentional */
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	HANDLE_NEWLINE(yytext[yyleng-1]);
	BEGIN(ST_IN_SCRIPTING);
	return T_OPEN_TAG;
}
	YY_BREAK
case 101:
YY_RULE_SETUP
{
	zend_error(E_WARNING, "&lt;?php_track_vars?&gt; is no longer supported - please use the track_vars INI directive instead");
	HANDLE_NEWLINE(yytext[yyleng-1]);
	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	return T_INLINE_HTML;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
{
	zendlval->value.str.val = (char *)estrndup(yytext+1, yyleng-1);
	zendlval->value.str.len = yyleng-1;
	zendlval->type = IS_STRING;
	return T_VARIABLE;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
{
	zendlval->value.str.val = (char *)estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	return T_STRING;
}
	YY_BREAK
case 104:
YY_RULE_SETUP
{
	zendlval->value.str.val = (char *)estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	return T_STRING;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
{
	zendlval->value.str.val = yytext; /* no copying - intentional */
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	HANDLE_NEWLINES(yytext,yyleng);
	return T_WHITESPACE;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
{ /* eat one line comments */
	HANDLE_NEWLINE(yytext[yyleng-1]);
	return T_COMMENT;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
{
	CG(comment_start_line) = CG(zend_lineno);
	BEGIN(ST_COMMENT);
	yymore();
}
	YY_BREAK
case 108:
YY_RULE_SETUP
{
	yymore();
}
	YY_BREAK
case 109:
YY_RULE_SETUP
{
	HANDLE_NEWLINES(yytext, yyleng);
	BEGIN(ST_IN_SCRIPTING);
	return T_COMMENT;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
{
	yymore();
}
	YY_BREAK
case 111:
YY_RULE_SETUP
{
	zendlval->value.str.val = yytext; /* no copying - intentional */
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	HANDLE_NEWLINES(yytext, yyleng);
	BEGIN(INITIAL);
	return T_CLOSE_TAG;  /* implicit ';' at php-end tag */
}
	YY_BREAK
case 112:
YY_RULE_SETUP
{
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	HANDLE_NEWLINES(yytext,yyleng);
	if (CG(asp_tags)) {
		BEGIN(INITIAL);
		zendlval->value.str.val = yytext; /* no copying - intentional */
		return T_CLOSE_TAG;  /* implicit ';' at php-end tag */
	} else {
	        zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
		return T_INLINE_HTML;
	}
}
	YY_BREAK
case 113:
YY_RULE_SETUP
{
	register char *s, *t;
	char *end;
	
	zendlval->value.str.val = estrndup(yytext+1, yyleng-2);
	zendlval->value.str.len = yyleng-2;
	zendlval->type = IS_STRING;
	HANDLE_NEWLINES(yytext,yyleng);
	
	/* convert escape sequences */
	s = t = zendlval->value.str.val;
	end = s+zendlval->value.str.len;
	while (s<end) {
		if (*s=='\\') {
			s++;
			if (s>=end) {
				continue;
			}
			switch(*s) {
				case 'n':
					*t++ = '\n';
					zendlval->value.str.len--;
					break;
				case 'r':
					*t++ = '\r';
					zendlval->value.str.len--;
					break;
				case 't':
					*t++ = '\t';
					zendlval->value.str.len--;
					break;
				case '\\':
				case '$':
				case '"':
					*t++ = *s;
					zendlval->value.str.len--;
					break;
				default:
					/* check for an octal */
					if (ZEND_IS_OCT(*s)) {
						char octal_buf[4] = { 0, 0, 0, 0 };

						octal_buf[0] = *s;
						zendlval->value.str.len--;
						if ((s+1)<end && ZEND_IS_OCT(*(s+1))) {
							octal_buf[1] = *(++s);
							zendlval->value.str.len--;
							if ((s+1)<end && ZEND_IS_OCT(*(s+1))) {
								octal_buf[2] = *(++s);
								zendlval->value.str.len--;
							}
						}
						*t++ = (char) strtol(octal_buf, NULL, 8);
					} else if (*s=='x' && (s+1)<end && ZEND_IS_HEX(*(s+1))) {
						char hex_buf[3] = { 0, 0, 0};

						zendlval->value.str.len--; /* for the 'x' */

						hex_buf[0] = *(++s);
						zendlval->value.str.len--;
						if ((s+1)<end && ZEND_IS_HEX(*(s+1))) {
							hex_buf[1] = *(++s);
							zendlval->value.str.len--;
						}
						*t++ = (char) strtol(hex_buf, NULL, 16);
					} else {
						*t++ = '\\';
						*t++ = *s;
					}
					break;
			}
			s++;
		} else {
			*t++ = *s++;
		}
	}
	*t = 0;
	
	return T_CONSTANT_ENCAPSED_STRING;
}
	YY_BREAK
case 114:
YY_RULE_SETUP
{
	register char *s, *t;
	char *end;
	
	zendlval->value.str.val = estrndup(yytext+1, yyleng-2);
	zendlval->value.str.len = yyleng-2;
	zendlval->type = IS_STRING;
	HANDLE_NEWLINES(yytext,yyleng);
	
	/* convert escape sequences */
	s = t = zendlval->value.str.val;
	end = s+zendlval->value.str.len;
	while (s<end) {
		if (*s=='\\') {
			s++;
			if (s>=end) {
				continue;
			}
			switch(*s) {
				case '\\':
				case '\'':
					*t++ = *s;
					zendlval->value.str.len--;
					break;
				default:
					*t++ = '\\';
					*t++ = *s;
					break;
			}
			s++;
		} else {
			*t++ = *s++;
		}
	}
	*t = 0;
	
	return T_CONSTANT_ENCAPSED_STRING;
}
	YY_BREAK
case 115:
YY_RULE_SETUP
{
	BEGIN(ST_DOUBLE_QUOTES);
	return '\"';
}
	YY_BREAK
case 116:
YY_RULE_SETUP
{
	char *s;
	CG(zend_lineno)++;
	CG(heredoc_len) = yyleng-3-1-(yytext[yyleng-2]=='\r'?1:0);
	s = yytext+3;
	while ((*s == ' ') || (*s == '\t')) {
		s++;
		CG(heredoc_len)--;
	}
	CG(heredoc) = estrndup(s, CG(heredoc_len));
	BEGIN(ST_HEREDOC);
	return T_START_HEREDOC;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
{
	BEGIN(ST_BACKQUOTE);
	return '`';
}
	YY_BREAK
case 118:
YY_RULE_SETUP
{
	BEGIN(ST_SINGLE_QUOTE);
	return '\'';
}
	YY_BREAK
case 119:
YY_RULE_SETUP
{
	int label_len;
	unsigned char unput_semicolon;

	CG(zend_lineno)++;
	if (yytext[yyleng-2]=='\r') {
		label_len = yyleng-2;
	} else {
		label_len = yyleng-1;
	}
	
	if (yytext[label_len-1]==';') {
		label_len--;
		unput_semicolon=1;
	} else{
		unput_semicolon=0;
	}

	if (label_len==CG(heredoc_len) && !memcmp(yytext, CG(heredoc), label_len)) {
		zendlval->value.str.val = estrndup(yytext, yyleng); /* unput destroys yytext */
		zendlval->value.str.len = yyleng;
		if (unput_semicolon) {
			unput(';');
		}
		efree(CG(heredoc));
		CG(heredoc)=NULL;
		CG(heredoc_len)=0;
		BEGIN(ST_IN_SCRIPTING);
		return T_END_HEREDOC;
	} else {
		zendlval->value.str.val = (char *)estrndup(yytext, yyleng);
		zendlval->value.str.len = yyleng;
		zendlval->type = IS_STRING;
		return T_STRING;
	}
}
	YY_BREAK
case 120:
YY_RULE_SETUP
{
	HANDLE_NEWLINES(yytext,yyleng);
	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	return T_ENCAPSED_AND_WHITESPACE;
}
	YY_BREAK
case 121:
YY_RULE_SETUP
{
	HANDLE_NEWLINES(yytext,yyleng);
	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	return T_ENCAPSED_AND_WHITESPACE;
}
	YY_BREAK
case 122:
YY_RULE_SETUP
{
	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	return T_ENCAPSED_AND_WHITESPACE;
}
	YY_BREAK
case 123:
YY_RULE_SETUP
{
	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	return T_ENCAPSED_AND_WHITESPACE;
}
	YY_BREAK
case 124:
YY_RULE_SETUP
{
	zendlval->value.lval = (long) yytext[0];
	if (yyleng == 2) {
		yyless(1);
		/*unput(yytext[1]);
		yytext[1] = 0;
		yyleng--;*/
	}
	return T_CHARACTER;	
}
	YY_BREAK
case 125:
YY_RULE_SETUP
{
	zendlval->value.lval = (long) yytext[0];
	return yytext[0];
}
	YY_BREAK
case 126:
YY_RULE_SETUP
{
	zendlval->value.lval = (long) yytext[0];
	yy_push_state(ST_IN_SCRIPTING);
	/*unput('$');*/
	yyless(1);
	return T_CURLY_OPEN;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
{
	zendlval->value.lval = (long) '\'';
	return T_CHARACTER;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
{
	zendlval->value.lval = (long)'\\';
	return T_CHARACTER;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
{
	zendlval->value.lval = (long) '"';
	return T_CHARACTER;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
{
	zendlval->value.lval = (long) '`';
	return T_CHARACTER;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
{
	zendlval->value.lval = strtol(yytext+1, NULL, 8);
	return T_CHARACTER;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
{
	zendlval->value.lval = strtol (yytext+2, NULL, 16);
	return T_CHARACTER;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
{
	switch (yytext[1]) {
		case 'n':
			zendlval->value.lval = (long) '\n';
			break;
		case 't':
			zendlval->value.lval = (long) '\t';
			break;
		case 'r':
			zendlval->value.lval = (long) '\r';
			break;
		case '\\':
			zendlval->value.lval = (long) '\\';
			break;
		case '$':
			zendlval->value.lval = (long) yytext[1];
			break;
		case '{':
			zendlval->value.lval = (long) yytext[1];
			break;
		default:
			zendlval->value.str.val = estrndup(yytext,yyleng);
			zendlval->value.str.len = yyleng;
			zendlval->type = IS_STRING;
			return T_BAD_CHARACTER;
			break;
	}
	return T_CHARACTER;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
{
	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	return T_ENCAPSED_AND_WHITESPACE;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
{
	BEGIN(ST_IN_SCRIPTING);
	return '\"';
}
	YY_BREAK
case 136:
YY_RULE_SETUP
{
	BEGIN(ST_IN_SCRIPTING);
	return '`';
}
	YY_BREAK
case 137:
YY_RULE_SETUP
{
	BEGIN(ST_IN_SCRIPTING);
	return '\'';
}
	YY_BREAK
case YY_STATE_EOF(ST_DOUBLE_QUOTES):
case YY_STATE_EOF(ST_BACKQUOTE):
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ST_IN_SCRIPTING):
case YY_STATE_EOF(ST_LOOKING_FOR_PROPERTY):
{
	return 0;
}
	YY_BREAK
case YY_STATE_EOF(ST_COMMENT):
{
	zend_error(E_COMPILE_WARNING,"Unterminated comment starting line %d", CG(comment_start_line));
	return 0;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
{
	zend_error(E_COMPILE_WARNING,"Unexpected character in input:  '%c' (ASCII=%d) state=%d",yytext[0],yytext[0],YYSTATE);
}
	YY_BREAK
case 139:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(ST_SINGLE_QUOTE):
case YY_STATE_EOF(ST_HEREDOC):
case YY_STATE_EOF(ST_LOOKING_FOR_VARNAME):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_last_accepting_cpos;
				yy_current_state = yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1327 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1327 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1326);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
